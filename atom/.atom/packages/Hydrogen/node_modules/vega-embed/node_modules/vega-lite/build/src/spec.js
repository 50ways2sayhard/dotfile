"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("./channel");
var compositeMark = require("./compositemark");
var encoding_1 = require("./encoding");
var vlEncoding = require("./encoding");
var log = require("./log");
var mark_1 = require("./mark");
var stack_1 = require("./stack");
var util_1 = require("./util");
/* Custom type guards */
function isFacetSpec(spec) {
    return spec['facet'] !== undefined;
}
exports.isFacetSpec = isFacetSpec;
function isUnitSpec(spec) {
    return !!spec['mark'];
}
exports.isUnitSpec = isUnitSpec;
function isLayerSpec(spec) {
    return spec['layer'] !== undefined;
}
exports.isLayerSpec = isLayerSpec;
function isRepeatSpec(spec) {
    return spec['repeat'] !== undefined;
}
exports.isRepeatSpec = isRepeatSpec;
function isConcatSpec(spec) {
    return isVConcatSpec(spec) || isHConcatSpec(spec);
}
exports.isConcatSpec = isConcatSpec;
function isVConcatSpec(spec) {
    return spec['vconcat'] !== undefined;
}
exports.isVConcatSpec = isVConcatSpec;
function isHConcatSpec(spec) {
    return spec['hconcat'] !== undefined;
}
exports.isHConcatSpec = isHConcatSpec;
/**
 * Decompose extended unit specs into composition of pure unit specs.
 */
// TODO: consider moving this to another file.  Maybe vl.spec.normalize or vl.normalize
function normalize(spec, config) {
    if (isFacetSpec(spec)) {
        return normalizeFacet(spec, config);
    }
    if (isLayerSpec(spec)) {
        return normalizeLayer(spec, config);
    }
    if (isRepeatSpec(spec)) {
        return normalizeRepeat(spec, config);
    }
    if (isVConcatSpec(spec)) {
        return normalizeVConcat(spec, config);
    }
    if (isHConcatSpec(spec)) {
        return normalizeHConcat(spec, config);
    }
    if (isUnitSpec(spec)) {
        var hasRow = encoding_1.channelHasField(spec.encoding, channel_1.ROW);
        var hasColumn = encoding_1.channelHasField(spec.encoding, channel_1.COLUMN);
        if (hasRow || hasColumn) {
            return normalizeFacetedUnit(spec, config);
        }
        return normalizeNonFacetUnit(spec, config);
    }
    throw new Error(log.message.INVALID_SPEC);
}
exports.normalize = normalize;
function normalizeFacet(spec, config) {
    var subspec = spec.spec, rest = __rest(spec, ["spec"]);
    return __assign({}, rest, { 
        // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
        spec: normalize(subspec, config) });
}
function normalizeLayer(spec, config) {
    var layer = spec.layer, rest = __rest(spec, ["layer"]);
    return __assign({}, rest, { layer: layer.map(function (subspec) { return isLayerSpec(subspec) ? normalizeLayer(subspec, config) : normalizeNonFacetUnit(subspec, config); }) });
}
function normalizeRepeat(spec, config) {
    var subspec = spec.spec, rest = __rest(spec, ["spec"]);
    return __assign({}, rest, { spec: normalize(subspec, config) });
}
function normalizeVConcat(spec, config) {
    var vconcat = spec.vconcat, rest = __rest(spec, ["vconcat"]);
    return __assign({}, rest, { vconcat: vconcat.map(function (subspec) { return normalize(subspec, config); }) });
}
function normalizeHConcat(spec, config) {
    var hconcat = spec.hconcat, rest = __rest(spec, ["hconcat"]);
    return __assign({}, rest, { hconcat: hconcat.map(function (subspec) { return normalize(subspec, config); }) });
}
function normalizeFacetedUnit(spec, config) {
    // New encoding in the inside spec should not contain row / column
    // as row/column should be moved to facet
    var _a = spec.encoding, row = _a.row, column = _a.column, encoding = __rest(_a, ["row", "column"]);
    // Mark and encoding should be moved into the inner spec
    var mark = spec.mark, width = spec.width, projection = spec.projection, height = spec.height, selection = spec.selection, _ = spec.encoding, outerSpec = __rest(spec, ["mark", "width", "projection", "height", "selection", "encoding"]);
    return __assign({}, outerSpec, { facet: __assign({}, (row ? { row: row } : {}), (column ? { column: column } : {})), spec: normalizeNonFacetUnit(__assign({}, (projection ? { projection: projection } : {}), { mark: mark }, (width ? { width: width } : {}), (height ? { height: height } : {}), { encoding: encoding }, (selection ? { selection: selection } : {})), config) });
}
function isNonFacetUnitSpecWithPrimitiveMark(spec) {
    return mark_1.isPrimitiveMark(spec.mark);
}
function normalizeNonFacetUnit(spec, config) {
    if (isNonFacetUnitSpecWithPrimitiveMark(spec)) {
        // TODO: thoroughly test
        if (encoding_1.isRanged(spec.encoding)) {
            return normalizeRangedUnit(spec);
        }
        var overlayConfig = config && config.overlay;
        var overlayWithLine = overlayConfig && spec.mark === mark_1.AREA &&
            util_1.contains(['linepoint', 'line'], overlayConfig.area);
        var overlayWithPoint = overlayConfig && ((overlayConfig.line && spec.mark === mark_1.LINE) ||
            (overlayConfig.area === 'linepoint' && spec.mark === mark_1.AREA));
        // TODO: consider moving this to become another case of compositeMark
        if (overlayWithPoint || overlayWithLine) {
            return normalizeOverlay(spec, overlayWithPoint, overlayWithLine, config);
        }
        return spec; // Nothing to normalize
    }
    else {
        return compositeMark.normalize(spec, config);
    }
}
function normalizeRangedUnit(spec) {
    var hasX = encoding_1.channelHasField(spec.encoding, channel_1.X);
    var hasY = encoding_1.channelHasField(spec.encoding, channel_1.Y);
    var hasX2 = encoding_1.channelHasField(spec.encoding, channel_1.X2);
    var hasY2 = encoding_1.channelHasField(spec.encoding, channel_1.Y2);
    if ((hasX2 && !hasX) || (hasY2 && !hasY)) {
        var normalizedSpec = util_1.duplicate(spec);
        if (hasX2 && !hasX) {
            normalizedSpec.encoding.x = normalizedSpec.encoding.x2;
            delete normalizedSpec.encoding.x2;
        }
        if (hasY2 && !hasY) {
            normalizedSpec.encoding.y = normalizedSpec.encoding.y2;
            delete normalizedSpec.encoding.y2;
        }
        return normalizedSpec;
    }
    return spec;
}
// FIXME(#1804): re-design this
function normalizeOverlay(spec, overlayWithPoint, overlayWithLine, config) {
    // _ is used to denote a dropped property of the unit spec
    // which should not be carried over to the layer spec
    var mark = spec.mark, selection = spec.selection, projection = spec.projection, encoding = spec.encoding, outerSpec = __rest(spec, ["mark", "selection", "projection", "encoding"]);
    var layer = [{ mark: mark, encoding: encoding }];
    // Need to copy stack config to overlayed layer
    var stackProps = stack_1.stack(mark, encoding, config ? config.stack : undefined);
    var overlayEncoding = encoding;
    if (stackProps) {
        var stackFieldChannel = stackProps.fieldChannel, offset = stackProps.offset;
        overlayEncoding = __assign({}, encoding, (_a = {}, _a[stackFieldChannel] = __assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})), _a));
    }
    if (overlayWithLine) {
        layer.push(__assign({}, (projection ? { projection: projection } : {}), { mark: {
                type: 'line',
                style: 'lineOverlay'
            } }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));
    }
    if (overlayWithPoint) {
        layer.push(__assign({}, (projection ? { projection: projection } : {}), { mark: {
                type: 'point',
                filled: true,
                style: 'pointOverlay'
            } }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));
    }
    return __assign({}, outerSpec, { layer: layer });
    var _a;
}
// TODO: add vl.spec.validate & move stuff from vl.validate to here
/* Accumulate non-duplicate fieldDefs in a dictionary */
function accumulate(dict, defs) {
    defs.forEach(function (fieldDef) {
        // Consider only pure fieldDef properties (ignoring scale, axis, legend)
        var pureFieldDef = ['field', 'type', 'value', 'timeUnit', 'bin', 'aggregate'].reduce(function (f, key) {
            if (fieldDef[key] !== undefined) {
                f[key] = fieldDef[key];
            }
            return f;
        }, {});
        var key = util_1.hash(pureFieldDef);
        dict[key] = dict[key] || fieldDef;
    });
    return dict;
}
/* Recursively get fieldDefs from a spec, returns a dictionary of fieldDefs */
function fieldDefIndex(spec, dict) {
    if (dict === void 0) { dict = {}; }
    // FIXME(https://github.com/vega/vega-lite/issues/2207): Support fieldDefIndex for repeat
    if (isLayerSpec(spec)) {
        spec.layer.forEach(function (layer) {
            if (isUnitSpec(layer)) {
                accumulate(dict, vlEncoding.fieldDefs(layer.encoding));
            }
            else {
                fieldDefIndex(layer, dict);
            }
        });
    }
    else if (isFacetSpec(spec)) {
        accumulate(dict, vlEncoding.fieldDefs(spec.facet));
        fieldDefIndex(spec.spec, dict);
    }
    else if (isRepeatSpec(spec)) {
        fieldDefIndex(spec.spec, dict);
    }
    else if (isConcatSpec(spec)) {
        var childSpec = isVConcatSpec(spec) ? spec.vconcat : spec.hconcat;
        childSpec.forEach(function (child) { return fieldDefIndex(child, dict); });
    }
    else {
        accumulate(dict, vlEncoding.fieldDefs(spec.encoding));
    }
    return dict;
}
/* Returns all non-duplicate fieldDefs in a spec in a flat array */
function fieldDefs(spec) {
    return util_1.vals(fieldDefIndex(spec));
}
exports.fieldDefs = fieldDefs;
function isStacked(spec, config) {
    config = config || spec.config;
    if (mark_1.isPrimitiveMark(spec.mark)) {
        return stack_1.stack(spec.mark, spec.encoding, config ? config.stack : undefined) !== null;
    }
    return false;
}
exports.isStacked = isStacked;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBb0Q7QUFDcEQsK0NBQWlEO0FBR2pELHVDQUFrRjtBQUNsRix1Q0FBeUM7QUFHekMsMkJBQTZCO0FBQzdCLCtCQUEyRTtBQUszRSxpQ0FBOEI7QUFJOUIsK0JBQTZEO0FBcU03RCx3QkFBd0I7QUFHeEIscUJBQTRCLElBQWM7SUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUZELGtDQUVDO0FBRUQsb0JBQTJCLElBQWM7SUFDdkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUZELGdDQUVDO0FBRUQscUJBQTRCLElBQWM7SUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUZELGtDQUVDO0FBRUQsc0JBQTZCLElBQWM7SUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdEMsQ0FBQztBQUZELG9DQUVDO0FBRUQsc0JBQTZCLElBQWM7SUFDekMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUZELG9DQUVDO0FBRUQsdUJBQThCLElBQWM7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQUZELHNDQUVDO0FBRUQsdUJBQThCLElBQWM7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQUZELHNDQUVDO0FBRUQ7O0dBRUc7QUFDSCx1RkFBdUY7QUFDdkYsbUJBQTBCLElBQTBCLEVBQUUsTUFBYztJQUNsRSxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFNLE1BQU0sR0FBRywwQkFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBRyxDQUFDLENBQUM7UUFDbkQsSUFBTSxTQUFTLEdBQUcsMEJBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFNLENBQUMsQ0FBQztRQUV6RCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFDRCxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQTFCRCw4QkEwQkM7QUFFRCx3QkFBd0IsSUFBeUMsRUFBRSxNQUFjO0lBQ3hFLElBQUEsbUJBQWEsRUFBRSw2QkFBTyxDQUFTO0lBQ3RDLE1BQU0sY0FDRCxJQUFJO1FBQ1AsdUdBQXVHO1FBQ3ZHLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBUSxJQUN2QztBQUNKLENBQUM7QUFFRCx3QkFBd0IsSUFBeUMsRUFBRSxNQUFjO0lBQ3hFLElBQUEsa0JBQVksRUFBRSw4QkFBTyxDQUFTO0lBQ3JDLE1BQU0sY0FDRCxJQUFJLElBQ1AsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBL0YsQ0FBK0YsQ0FBQyxJQUM5SDtBQUNKLENBQUM7QUFFRCx5QkFBeUIsSUFBMEMsRUFBRSxNQUFjO0lBQzFFLElBQUEsbUJBQWEsRUFBRSw2QkFBTyxDQUFTO0lBQ3RDLE1BQU0sY0FDRCxJQUFJLElBQ1AsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQ2hDO0FBQ0osQ0FBQztBQUVELDBCQUEwQixJQUEyQyxFQUFFLE1BQWM7SUFDNUUsSUFBQSxzQkFBZ0IsRUFBRSxnQ0FBTyxDQUFTO0lBQ3pDLE1BQU0sY0FDRCxJQUFJLElBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQixDQUFDLElBQzdEO0FBQ0osQ0FBQztBQUVELDBCQUEwQixJQUEyQyxFQUFFLE1BQWM7SUFDNUUsSUFBQSxzQkFBZ0IsRUFBRSxnQ0FBTyxDQUFTO0lBQ3pDLE1BQU0sY0FDRCxJQUFJLElBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQixDQUFDLElBQzdEO0FBQ0osQ0FBQztBQUVELDhCQUE4QixJQUE4QixFQUFFLE1BQWM7SUFDMUUsa0VBQWtFO0lBQ2xFLHlDQUF5QztJQUN6QyxJQUFNLGtCQUF1RCxFQUF0RCxZQUFRLEVBQUUsa0JBQWMsRUFBRSx3Q0FBNEIsQ0FBQztJQUU5RCx3REFBd0Q7SUFDakQsSUFBQSxnQkFBSSxFQUFFLGtCQUFLLEVBQUUsNEJBQVUsRUFBRSxvQkFBTSxFQUFFLDBCQUFTLEVBQUUsaUJBQVcsRUFBRSw0RkFBWSxDQUFTO0lBRXJGLE1BQU0sY0FDRCxTQUFTLElBQ1osS0FBSyxlQUNBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsS0FBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNsQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFNUIsSUFBSSxFQUFFLHFCQUFxQixjQUN0QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLFlBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDbkMsSUFBSSxNQUFBLElBQ0QsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxPQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3RCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUMzQixRQUFRLFVBQUEsSUFDTCxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FDaEMsTUFBTSxDQUFDLElBQ1Y7QUFDSixDQUFDO0FBRUQsNkNBQTZDLElBQStDO0lBRXhGLE1BQU0sQ0FBQyxzQkFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBR0QsK0JBQStCLElBQStDLEVBQUUsTUFBYztJQUM1RixFQUFFLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsd0JBQXdCO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUVELElBQU0sYUFBYSxHQUFrQixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM5RCxJQUFNLGVBQWUsR0FBRyxhQUFhLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFJO1lBQ3pELGVBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBTSxnQkFBZ0IsR0FBRyxhQUFhLElBQUksQ0FDeEMsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBSSxDQUFDO1lBQzFDLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFJLENBQUMsQ0FDM0QsQ0FBQztRQUNGLHFFQUFxRTtRQUNyRSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsSUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0lBQ3RDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQztBQUVELDZCQUE2QixJQUFjO0lBQ3pDLElBQU0sSUFBSSxHQUFHLDBCQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFDLENBQUMsQ0FBQztJQUMvQyxJQUFNLElBQUksR0FBRywwQkFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBTSxLQUFLLEdBQUcsMEJBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQUUsQ0FBQyxDQUFDO0lBQ2pELElBQU0sS0FBSyxHQUFHLDBCQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFFLENBQUMsQ0FBQztJQUNqRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQU0sY0FBYyxHQUFHLGdCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQixjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUN2RCxPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3BDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ3ZELE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDcEMsQ0FBQztRQUVELE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBR0QsK0JBQStCO0FBQy9CLDBCQUEwQixJQUFjLEVBQUUsZ0JBQXlCLEVBQUUsZUFBd0IsRUFBRSxNQUFjO0lBQzNHLDBEQUEwRDtJQUMxRCxxREFBcUQ7SUFDOUMsSUFBQSxnQkFBSSxFQUFFLDBCQUFTLEVBQUUsNEJBQVUsRUFBRSx3QkFBUSxFQUFFLHlFQUFZLENBQVM7SUFDbkUsSUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFDLElBQUksTUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFhLENBQUMsQ0FBQztJQUU3QywrQ0FBK0M7SUFDL0MsSUFBTSxVQUFVLEdBQUcsYUFBSyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU1RSxJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDL0IsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNSLElBQUEsMkNBQStCLEVBQUUsMEJBQU0sQ0FBZTtRQUM3RCxlQUFlLGdCQUNWLFFBQVEsZUFDVixpQkFBaUIsaUJBQ2IsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQzNCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BRXJDLENBQUM7SUFDSixDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNwQixLQUFLLENBQUMsSUFBSSxjQUNMLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVUsWUFBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUNuQyxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLGFBQWE7YUFDckIsSUFDRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDakMsUUFBUSxFQUFFLGVBQWUsSUFDekIsQ0FBQztJQUNMLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDckIsS0FBSyxDQUFDLElBQUksY0FDTCxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLFlBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDbkMsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRSxPQUFPO2dCQUNiLE1BQU0sRUFBRSxJQUFJO2dCQUNaLEtBQUssRUFBRSxjQUFjO2FBQ3RCLElBQ0UsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxXQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ2pDLFFBQVEsRUFBRSxlQUFlLElBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxjQUNELFNBQVMsSUFDWixLQUFLLE9BQUEsSUFDTDs7QUFDSixDQUFDO0FBRUQsbUVBQW1FO0FBRW5FLHdEQUF3RDtBQUN4RCxvQkFBb0IsSUFBUyxFQUFFLElBQXVCO0lBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRO1FBQzVCLHdFQUF3RTtRQUN4RSxJQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLEdBQUc7WUFDNUYsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNELE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDUCxJQUFNLEdBQUcsR0FBRyxXQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELDhFQUE4RTtBQUM5RSx1QkFBMEIsSUFBNEMsRUFBRSxJQUE0QjtJQUE1QixxQkFBQSxFQUFBLFNBQTRCO0lBQ2xHLHlGQUF5RjtJQUN6RixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUN0QixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixVQUFVLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0IsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwRSxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxtRUFBbUU7QUFDbkUsbUJBQTBCLElBQTRDO0lBQ3BFLE1BQU0sQ0FBQyxXQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUZELDhCQUVDO0FBRUQsbUJBQTBCLElBQXdDLEVBQUUsTUFBZTtJQUNqRixNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsRUFBRSxDQUFDLENBQUMsc0JBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxhQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUM3QixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDbEMsS0FBSyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBUkQsOEJBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NPTFVNTiwgUk9XLCBYLCBYMiwgWSwgWTJ9IGZyb20gJy4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBjb21wb3NpdGVNYXJrIGZyb20gJy4vY29tcG9zaXRlbWFyayc7XG5pbXBvcnQge0NvbmZpZywgT3ZlcmxheUNvbmZpZ30gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHtEYXRhfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHtjaGFubmVsSGFzRmllbGQsIEVuY29kaW5nLCBFbmNvZGluZ1dpdGhGYWNldCwgaXNSYW5nZWR9IGZyb20gJy4vZW5jb2RpbmcnO1xuaW1wb3J0ICogYXMgdmxFbmNvZGluZyBmcm9tICcuL2VuY29kaW5nJztcbmltcG9ydCB7RmFjZXRNYXBwaW5nfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7RmllbGQsIEZpZWxkRGVmLCBSZXBlYXRSZWZ9IGZyb20gJy4vZmllbGRkZWYnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcbmltcG9ydCB7QW55TWFyaywgQVJFQSwgaXNQcmltaXRpdmVNYXJrLCBMSU5FLCBNYXJrLCBNYXJrRGVmfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHtQcm9qZWN0aW9ufSBmcm9tICcuL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtSZXBlYXR9IGZyb20gJy4vcmVwZWF0JztcbmltcG9ydCB7UmVzb2x2ZX0gZnJvbSAnLi9yZXNvbHZlJztcbmltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuL3NlbGVjdGlvbic7XG5pbXBvcnQge3N0YWNrfSBmcm9tICcuL3N0YWNrJztcbmltcG9ydCB7VGl0bGVQYXJhbXN9IGZyb20gJy4vdGl0bGUnO1xuaW1wb3J0IHtUb3BMZXZlbFByb3BlcnRpZXN9IGZyb20gJy4vdG9wbGV2ZWxwcm9wcyc7XG5pbXBvcnQge1RyYW5zZm9ybX0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHtjb250YWlucywgRGljdCwgZHVwbGljYXRlLCBoYXNoLCB2YWxzfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCB0eXBlIFRvcExldmVsPFMgZXh0ZW5kcyBCYXNlU3BlYz4gPSBTICYgVG9wTGV2ZWxQcm9wZXJ0aWVzICYge1xuICAvKipcbiAgICogVVJMIHRvIFtKU09OIHNjaGVtYV0oaHR0cDovL2pzb24tc2NoZW1hLm9yZy8pIGZvciBhIFZlZ2EtTGl0ZSBzcGVjaWZpY2F0aW9uLiBVbmxlc3MgeW91IGhhdmUgYSByZWFzb24gdG8gY2hhbmdlIHRoaXMsIHVzZSBgaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby9zY2hlbWEvdmVnYS1saXRlL3YyLmpzb25gLiBTZXR0aW5nIHRoZSBgJHNjaGVtYWAgcHJvcGVydHkgYWxsb3dzIGF1dG9tYXRpYyB2YWxpZGF0aW9uIGFuZCBhdXRvY29tcGxldGUgaW4gZWRpdG9ycyB0aGF0IHN1cHBvcnQgSlNPTiBzY2hlbWEuXG4gICAqIEBmb3JtYXQgdXJpXG4gICAqL1xuICAkc2NoZW1hPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBWZWdhLUxpdGUgY29uZmlndXJhdGlvbiBvYmplY3QuICBUaGlzIHByb3BlcnR5IGNhbiBvbmx5IGJlIGRlZmluZWQgYXQgdGhlIHRvcC1sZXZlbCBvZiBhIHNwZWNpZmljYXRpb24uXG4gICAqL1xuICBjb25maWc/OiBDb25maWc7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VTcGVjIHtcbiAgLyoqXG4gICAqIFRpdGxlIGZvciB0aGUgcGxvdC5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nIHwgVGl0bGVQYXJhbXM7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIHZpc3VhbGl6YXRpb24gZm9yIGxhdGVyIHJlZmVyZW5jZS5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIG9mIHRoaXMgbWFyayBmb3IgY29tbWVudGluZyBwdXJwb3NlLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZXNjcmliaW5nIHRoZSBkYXRhIHNvdXJjZVxuICAgKi9cbiAgZGF0YT86IERhdGE7XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGRhdGEgdHJhbnNmb3JtYXRpb25zIHN1Y2ggYXMgZmlsdGVyIGFuZCBuZXcgZmllbGQgY2FsY3VsYXRpb24uXG4gICAqL1xuICB0cmFuc2Zvcm0/OiBUcmFuc2Zvcm1bXTtcbn1cblxuLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI1MDMpOiBNYWtlIHRoaXMgZ2VuZXJpYyBzbyB3ZSBjYW4gc3VwcG9ydCBzb21lIGZvcm0gb2YgdG9wLWRvd24gc2l6aW5nLlxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRTaXplTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiBhIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgKlxuICAgKiAtIElmIGEgdmlldydzIFtgYXV0b3NpemVgXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NpemUuaHRtbCNhdXRvc2l6ZSkgdHlwZSBpcyBgXCJmaXRcImAgb3IgaXRzIHgtY2hhbm5lbCBoYXMgYSBbY29udGludW91cyBzY2FsZV0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zY2FsZS5odG1sI2NvbnRpbnVvdXMpLCB0aGUgd2lkdGggd2lsbCBiZSB0aGUgdmFsdWUgb2YgW2Bjb25maWcudmlldy53aWR0aGBdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gRm9yIHgtYXhpcyB3aXRoIGEgYmFuZCBvciBwb2ludCBzY2FsZTogaWYgW2ByYW5nZVN0ZXBgXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NjYWxlLmh0bWwjYmFuZCkgaXMgYSBudW1lcmljIHZhbHVlIG9yIHVuc3BlY2lmaWVkLCB0aGUgd2lkdGggaXMgW2RldGVybWluZWQgYnkgdGhlIHJhbmdlIHN0ZXAsIHBhZGRpbmdzLCBhbmQgdGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBmaWVsZCBtYXBwZWQgdG8geC1jaGFubmVsXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NjYWxlLmh0bWwjYmFuZCkuICAgT3RoZXJ3aXNlLCBpZiB0aGUgYHJhbmdlU3RlcGAgaXMgYG51bGxgLCB0aGUgd2lkdGggd2lsbCBiZSB0aGUgdmFsdWUgb2YgW2Bjb25maWcudmlldy53aWR0aGBdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gSWYgbm8gZmllbGQgaXMgbWFwcGVkIHRvIGB4YCBjaGFubmVsLCB0aGUgYHdpZHRoYCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBbYGNvbmZpZy5zY2FsZS50ZXh0WFJhbmdlU3RlcGBdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc2l6ZS5odG1sI2RlZmF1bHQtd2lkdGgtYW5kLWhlaWdodCkgZm9yIGB0ZXh0YCBtYXJrIGFuZCB0aGUgdmFsdWUgb2YgYHJhbmdlU3RlcGAgZm9yIG90aGVyIG1hcmtzLlxuICAgKlxuICAgKiBfX05vdGU6X18gRm9yIHBsb3RzIHdpdGggW2Byb3dgIGFuZCBgY29sdW1uYCBjaGFubmVsc10oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9lbmNvZGluZy5odG1sI2ZhY2V0KSwgdGhpcyByZXByZXNlbnRzIHRoZSB3aWR0aCBvZiBhIHNpbmdsZSB2aWV3LlxuICAgKlxuICAgKiBfX1NlZSBhbHNvOl9fIFRoZSBkb2N1bWVudGF0aW9uIGZvciBbd2lkdGggYW5kIGhlaWdodF0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zaXplLmh0bWwpIGNvbnRhaW5zIG1vcmUgZXhhbXBsZXMuXG4gICAqL1xuICB3aWR0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiBhIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfX1xuICAgKiAtIElmIGEgdmlldydzIFtgYXV0b3NpemVgXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NpemUuaHRtbCNhdXRvc2l6ZSkgdHlwZSBpcyBgXCJmaXRcImAgb3IgaXRzIHktY2hhbm5lbCBoYXMgYSBbY29udGludW91cyBzY2FsZV0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zY2FsZS5odG1sI2NvbnRpbnVvdXMpLCB0aGUgaGVpZ2h0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIFtgY29uZmlnLnZpZXcuaGVpZ2h0YF0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zcGVjLmh0bWwjY29uZmlnKS5cbiAgICogLSBGb3IgeS1heGlzIHdpdGggYSBiYW5kIG9yIHBvaW50IHNjYWxlOiBpZiBbYHJhbmdlU3RlcGBdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc2NhbGUuaHRtbCNiYW5kKSBpcyBhIG51bWVyaWMgdmFsdWUgb3IgdW5zcGVjaWZpZWQsIHRoZSBoZWlnaHQgaXMgW2RldGVybWluZWQgYnkgdGhlIHJhbmdlIHN0ZXAsIHBhZGRpbmdzLCBhbmQgdGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBmaWVsZCBtYXBwZWQgdG8geS1jaGFubmVsXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NjYWxlLmh0bWwjYmFuZCkuIE90aGVyd2lzZSwgaWYgdGhlIGByYW5nZVN0ZXBgIGlzIGBudWxsYCwgdGhlIGhlaWdodCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBbYGNvbmZpZy52aWV3LmhlaWdodGBdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gSWYgbm8gZmllbGQgaXMgbWFwcGVkIHRvIGB5YCBjaGFubmVsLCB0aGUgYGhlaWdodGAgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHJhbmdlU3RlcGAuXG4gICAqXG4gICAqIF9fTm90ZV9fOiBGb3IgcGxvdHMgd2l0aCBbYHJvd2AgYW5kIGBjb2x1bW5gIGNoYW5uZWxzXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2VuY29kaW5nLmh0bWwjZmFjZXQpLCB0aGlzIHJlcHJlc2VudHMgdGhlIGhlaWdodCBvZiBhIHNpbmdsZSB2aWV3LlxuICAgKlxuICAgKiBfX1NlZSBhbHNvOl9fIFRoZSBkb2N1bWVudGF0aW9uIGZvciBbd2lkdGggYW5kIGhlaWdodF0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zaXplLmh0bWwpIGNvbnRhaW5zIG1vcmUgZXhhbXBsZXMuXG4gICAqL1xuICBoZWlnaHQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY1VuaXRTcGVjPEUgZXh0ZW5kcyBFbmNvZGluZzxhbnk+LCBNPiBleHRlbmRzIEJhc2VTcGVjLCBMYXlvdXRTaXplTWl4aW5zIHtcblxuICAvKipcbiAgICogQSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgbWFyayB0eXBlIChvbmUgb2YgYFwiYmFyXCJgLCBgXCJjaXJjbGVcImAsIGBcInNxdWFyZVwiYCwgYFwidGlja1wiYCwgYFwibGluZVwiYCxcbiAgICogKiBgXCJhcmVhXCJgLCBgXCJwb2ludFwiYCwgYFwicnVsZVwiYCwgYFwiZ2Vvc2hhcGVcImAsIGFuZCBgXCJ0ZXh0XCJgKSBvciBhIFttYXJrIGRlZmluaXRpb24gb2JqZWN0XShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL21hcmsuaHRtbCNtYXJrLWRlZikuXG4gICAqL1xuICBtYXJrOiBNO1xuXG4gIC8qKlxuICAgKiBBIGtleS12YWx1ZSBtYXBwaW5nIGJldHdlZW4gZW5jb2RpbmcgY2hhbm5lbHMgYW5kIGRlZmluaXRpb24gb2YgZmllbGRzLlxuICAgKi9cbiAgZW5jb2Rpbmc/OiBFO1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgZGVmaW5pbmcgcHJvcGVydGllcyBvZiBnZW9ncmFwaGljIHByb2plY3Rpb24uXG4gICAqXG4gICAqIFdvcmtzIHdpdGggYFwiZ2Vvc2hhcGVcImAgbWFya3MgYW5kIGBcInBvaW50XCJgIG9yIGBcImxpbmVcImAgbWFya3MgdGhhdCBoYXZlIGEgY2hhbm5lbCAob25lIG9yIG1vcmUgb2YgYFwiWFwiYCwgYFwiWDJcImAsIGBcIllcImAsIGBcIlkyXCJgKSB3aXRoIHR5cGUgYFwibGF0aXR1ZGVcImAsIG9yIGBcImxvbmdpdHVkZVwiYC5cbiAgICovXG4gIHByb2plY3Rpb24/OiBQcm9qZWN0aW9uO1xuXG4gIC8qKlxuICAgKiBBIGtleS12YWx1ZSBtYXBwaW5nIGJldHdlZW4gc2VsZWN0aW9uIG5hbWVzIGFuZCBkZWZpbml0aW9ucy5cbiAgICovXG4gIHNlbGVjdGlvbj86IHtbbmFtZTogc3RyaW5nXTogU2VsZWN0aW9uRGVmfTtcbn1cblxuZXhwb3J0IHR5cGUgVW5pdFNwZWMgPSBHZW5lcmljVW5pdFNwZWM8RW5jb2Rpbmc8c3RyaW5nIHwgUmVwZWF0UmVmPiwgTWFyayB8IE1hcmtEZWY+O1xuXG4vKipcbiAqIFVuaXQgc3BlYyB0aGF0IGNhbiBoYXZlIGEgY29tcG9zaXRlIG1hcmsuXG4gKi9cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZVVuaXRTcGVjID0gR2VuZXJpY1VuaXRTcGVjPEVuY29kaW5nPHN0cmluZyB8IFJlcGVhdFJlZj4sIEFueU1hcms+O1xuXG4vKipcbiAqIFVuaXQgc3BlYyB0aGF0IGNhbiBoYXZlIGEgY29tcG9zaXRlIG1hcmsgYW5kIHJvdyBvciBjb2x1bW4gY2hhbm5lbHMuXG4gKi9cbmV4cG9ydCB0eXBlIEZhY2V0ZWRDb21wb3NpdGVVbml0U3BlYyA9IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZ1dpdGhGYWNldDxzdHJpbmcgfCBSZXBlYXRSZWY+LCBBbnlNYXJrPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljTGF5ZXJTcGVjPFUgZXh0ZW5kcyBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiBleHRlbmRzIEJhc2VTcGVjLCBMYXlvdXRTaXplTWl4aW5zIHtcbiAgLyoqXG4gICAqIExheWVyIG9yIHNpbmdsZSB2aWV3IHNwZWNpZmljYXRpb25zIHRvIGJlIGxheWVyZWQuXG4gICAqXG4gICAqIF9fTm90ZV9fOiBTcGVjaWZpY2F0aW9ucyBpbnNpZGUgYGxheWVyYCBjYW5ub3QgdXNlIGByb3dgIGFuZCBgY29sdW1uYCBjaGFubmVscyBhcyBsYXllcmluZyBmYWNldCBzcGVjaWZpY2F0aW9ucyBpcyBub3QgYWxsb3dlZC5cbiAgICovXG4gIGxheWVyOiAoR2VuZXJpY0xheWVyU3BlYzxVPiB8IFUpW107XG5cbiAgLyoqXG4gICAqIFNjYWxlLCBheGlzLCBhbmQgbGVnZW5kIHJlc29sdXRpb25zIGZvciBsYXllcnMuXG4gICAqL1xuICByZXNvbHZlPzogUmVzb2x2ZTtcbn1cblxuZXhwb3J0IHR5cGUgTGF5ZXJTcGVjID0gR2VuZXJpY0xheWVyU3BlYzxVbml0U3BlYz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY0ZhY2V0U3BlYzxVIGV4dGVuZHMgR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4gZXh0ZW5kcyBCYXNlU3BlYyB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgbWFwcGluZ3MgYmV0d2VlbiBgcm93YCBhbmQgYGNvbHVtbmAgY2hhbm5lbHMgYW5kIHRoZWlyIGZpZWxkIGRlZmluaXRpb25zLlxuICAgKi9cbiAgZmFjZXQ6IEZhY2V0TWFwcGluZzxzdHJpbmcgfCBSZXBlYXRSZWY+O1xuXG4gIC8qKlxuICAgKiBBIHNwZWNpZmljYXRpb24gb2YgdGhlIHZpZXcgdGhhdCBnZXRzIGZhY2V0ZWQuXG4gICAqL1xuICBzcGVjOiBHZW5lcmljTGF5ZXJTcGVjPFU+IHwgVTtcbiAgLy8gVE9ETzogcmVwbGFjZSB0aGlzIHdpdGggR2VuZXJpY1NwZWM8VT4gb25jZSB3ZSBzdXBwb3J0IGFsbCBjYXNlcztcblxuICAvKipcbiAgICogU2NhbGUsIGF4aXMsIGFuZCBsZWdlbmQgcmVzb2x1dGlvbnMgZm9yIGZhY2V0cy5cbiAgICovXG4gIHJlc29sdmU/OiBSZXNvbHZlO1xufVxuXG5leHBvcnQgdHlwZSBGYWNldFNwZWMgPSBHZW5lcmljRmFjZXRTcGVjPFVuaXRTcGVjPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljUmVwZWF0U3BlYzxVIGV4dGVuZHMgR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4gZXh0ZW5kcyBCYXNlU3BlYyB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgd2hhdCBmaWVsZHMgc2hvdWxkIGJlIHJlcGVhdGVkIGludG8gdmlld3MgdGhhdCBhcmUgbGFpZCBvdXQgYXMgYSBgcm93YCBvciBgY29sdW1uYC5cbiAgICovXG4gIHJlcGVhdDogUmVwZWF0O1xuXG4gIHNwZWM6IEdlbmVyaWNTcGVjPFU+O1xuXG4gIC8qKlxuICAgKiBTY2FsZSBhbmQgbGVnZW5kIHJlc29sdXRpb25zIGZvciByZXBlYXRlZCBjaGFydHMuXG4gICAqL1xuICByZXNvbHZlPzogUmVzb2x2ZTtcbn1cblxuZXhwb3J0IHR5cGUgUmVwZWF0U3BlYyA9IEdlbmVyaWNSZXBlYXRTcGVjPFVuaXRTcGVjPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljVkNvbmNhdFNwZWM8VSBleHRlbmRzIEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IGV4dGVuZHMgQmFzZVNwZWMge1xuICAvKipcbiAgICogQSBsaXN0IG9mIHZpZXdzIHRoYXQgc2hvdWxkIGJlIGNvbmNhdGVuYXRlZCBhbmQgcHV0IGludG8gYSBjb2x1bW4uXG4gICAqL1xuICB2Y29uY2F0OiAoR2VuZXJpY1NwZWM8VT4pW107XG5cbiAgLyoqXG4gICAqIFNjYWxlLCBheGlzLCBhbmQgbGVnZW5kIHJlc29sdXRpb25zIGZvciB2ZXJ0aWNhbGx5IGNvbmNhdGVuYXRlZCBjaGFydHMuXG4gICAqL1xuICByZXNvbHZlPzogUmVzb2x2ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljSENvbmNhdFNwZWM8VSBleHRlbmRzIEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IGV4dGVuZHMgQmFzZVNwZWMge1xuICAvKipcbiAgICogQSBsaXN0IG9mIHZpZXdzIHRoYXQgc2hvdWxkIGJlIGNvbmNhdGVuYXRlZCBhbmQgcHV0IGludG8gYSByb3cuXG4gICAqL1xuICBoY29uY2F0OiAoR2VuZXJpY1NwZWM8VT4pW107XG5cbiAgLyoqXG4gICAqIFNjYWxlLCBheGlzLCBhbmQgbGVnZW5kIHJlc29sdXRpb25zIGZvciBob3Jpem9udGFsbHkgY29uY2F0ZW5hdGVkIGNoYXJ0cy5cbiAgICovXG4gIHJlc29sdmU/OiBSZXNvbHZlO1xufVxuXG5leHBvcnQgdHlwZSBDb25jYXRTcGVjID0gR2VuZXJpY1ZDb25jYXRTcGVjPFVuaXRTcGVjPiB8IEdlbmVyaWNIQ29uY2F0U3BlYzxVbml0U3BlYz47XG5cbmV4cG9ydCB0eXBlIEdlbmVyaWNTcGVjPFUgZXh0ZW5kcyBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiA9IFUgfCBHZW5lcmljTGF5ZXJTcGVjPFU+IHwgR2VuZXJpY0ZhY2V0U3BlYzxVPiB8IEdlbmVyaWNSZXBlYXRTcGVjPFU+IHwgR2VuZXJpY1ZDb25jYXRTcGVjPFU+IHwgR2VuZXJpY0hDb25jYXRTcGVjPFU+O1xuXG5leHBvcnQgdHlwZSBTcGVjID0gR2VuZXJpY1NwZWM8VW5pdFNwZWM+O1xuXG5leHBvcnQgdHlwZSBUb3BMZXZlbEV4dGVuZGVkU3BlYyA9IFRvcExldmVsPEZhY2V0ZWRDb21wb3NpdGVVbml0U3BlYz4gfCBUb3BMZXZlbDxHZW5lcmljTGF5ZXJTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPj4gfCBUb3BMZXZlbDxHZW5lcmljRmFjZXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPj4gfCBUb3BMZXZlbDxHZW5lcmljUmVwZWF0U3BlYzxDb21wb3NpdGVVbml0U3BlYz4+IHwgVG9wTGV2ZWw8R2VuZXJpY1ZDb25jYXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPj4gfCBUb3BMZXZlbDxHZW5lcmljSENvbmNhdFNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+PjtcblxuLyogQ3VzdG9tIHR5cGUgZ3VhcmRzICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmFjZXRTcGVjKHNwZWM6IEJhc2VTcGVjKTogc3BlYyBpcyBHZW5lcmljRmFjZXRTcGVjPEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IHtcbiAgcmV0dXJuIHNwZWNbJ2ZhY2V0J10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5pdFNwZWMoc3BlYzogQmFzZVNwZWMpOiBzcGVjIGlzIEZhY2V0ZWRDb21wb3NpdGVVbml0U3BlYyB8IFVuaXRTcGVjIHtcbiAgcmV0dXJuICEhc3BlY1snbWFyayddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMYXllclNwZWMoc3BlYzogQmFzZVNwZWMpOiBzcGVjIGlzIEdlbmVyaWNMYXllclNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4ge1xuICByZXR1cm4gc3BlY1snbGF5ZXInXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXBlYXRTcGVjKHNwZWM6IEJhc2VTcGVjKTogc3BlYyBpcyBHZW5lcmljUmVwZWF0U3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiB7XG4gIHJldHVybiBzcGVjWydyZXBlYXQnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb25jYXRTcGVjKHNwZWM6IEJhc2VTcGVjKTogc3BlYyBpcyBHZW5lcmljVkNvbmNhdFNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4gfCBHZW5lcmljSENvbmNhdFNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4ge1xuICByZXR1cm4gaXNWQ29uY2F0U3BlYyhzcGVjKSB8fCBpc0hDb25jYXRTcGVjKHNwZWMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWQ29uY2F0U3BlYyhzcGVjOiBCYXNlU3BlYyk6IHNwZWMgaXMgR2VuZXJpY1ZDb25jYXRTcGVjPEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IHtcbiAgcmV0dXJuIHNwZWNbJ3Zjb25jYXQnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIQ29uY2F0U3BlYyhzcGVjOiBCYXNlU3BlYyk6IHNwZWMgaXMgR2VuZXJpY0hDb25jYXRTcGVjPEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IHtcbiAgcmV0dXJuIHNwZWNbJ2hjb25jYXQnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERlY29tcG9zZSBleHRlbmRlZCB1bml0IHNwZWNzIGludG8gY29tcG9zaXRpb24gb2YgcHVyZSB1bml0IHNwZWNzLlxuICovXG4vLyBUT0RPOiBjb25zaWRlciBtb3ZpbmcgdGhpcyB0byBhbm90aGVyIGZpbGUuICBNYXliZSB2bC5zcGVjLm5vcm1hbGl6ZSBvciB2bC5ub3JtYWxpemVcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoc3BlYzogVG9wTGV2ZWxFeHRlbmRlZFNwZWMsIGNvbmZpZzogQ29uZmlnKTogU3BlYyB7XG4gIGlmIChpc0ZhY2V0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBub3JtYWxpemVGYWNldChzcGVjLCBjb25maWcpO1xuICB9XG4gIGlmIChpc0xheWVyU3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBub3JtYWxpemVMYXllcihzcGVjLCBjb25maWcpO1xuICB9XG4gIGlmIChpc1JlcGVhdFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplUmVwZWF0KHNwZWMsIGNvbmZpZyk7XG4gIH1cbiAgaWYgKGlzVkNvbmNhdFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplVkNvbmNhdChzcGVjLCBjb25maWcpO1xuICB9XG4gIGlmIChpc0hDb25jYXRTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUhDb25jYXQoc3BlYywgY29uZmlnKTtcbiAgfVxuICBpZiAoaXNVbml0U3BlYyhzcGVjKSkge1xuICAgIGNvbnN0IGhhc1JvdyA9IGNoYW5uZWxIYXNGaWVsZChzcGVjLmVuY29kaW5nLCBST1cpO1xuICAgIGNvbnN0IGhhc0NvbHVtbiA9IGNoYW5uZWxIYXNGaWVsZChzcGVjLmVuY29kaW5nLCBDT0xVTU4pO1xuXG4gICAgaWYgKGhhc1JvdyB8fCBoYXNDb2x1bW4pIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVGYWNldGVkVW5pdChzcGVjLCBjb25maWcpO1xuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplTm9uRmFjZXRVbml0KHNwZWMsIGNvbmZpZyk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLklOVkFMSURfU1BFQyk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUZhY2V0KHNwZWM6IEdlbmVyaWNGYWNldFNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+LCBjb25maWc6IENvbmZpZyk6IEZhY2V0U3BlYyB7XG4gIGNvbnN0IHtzcGVjOiBzdWJzcGVjLCAuLi5yZXN0fSA9IHNwZWM7XG4gIHJldHVybiB7XG4gICAgLi4ucmVzdCxcbiAgICAvLyBUT0RPOiByZW1vdmUgXCJhbnlcIiBvbmNlIHdlIHN1cHBvcnQgYWxsIGZhY2V0IGxpc3RlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI3NjBcbiAgICBzcGVjOiBub3JtYWxpemUoc3Vic3BlYywgY29uZmlnKSBhcyBhbnlcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTGF5ZXIoc3BlYzogR2VuZXJpY0xheWVyU3BlYzxDb21wb3NpdGVVbml0U3BlYz4sIGNvbmZpZzogQ29uZmlnKTogTGF5ZXJTcGVjIHtcbiAgY29uc3Qge2xheWVyOiBsYXllciwgLi4ucmVzdH0gPSBzcGVjO1xuICByZXR1cm4ge1xuICAgIC4uLnJlc3QsXG4gICAgbGF5ZXI6IGxheWVyLm1hcCgoc3Vic3BlYykgPT4gaXNMYXllclNwZWMoc3Vic3BlYykgPyBub3JtYWxpemVMYXllcihzdWJzcGVjLCBjb25maWcpIDogbm9ybWFsaXplTm9uRmFjZXRVbml0KHN1YnNwZWMsIGNvbmZpZykpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlcGVhdChzcGVjOiBHZW5lcmljUmVwZWF0U3BlYzxDb21wb3NpdGVVbml0U3BlYz4sIGNvbmZpZzogQ29uZmlnKTogUmVwZWF0U3BlYyB7XG4gIGNvbnN0IHtzcGVjOiBzdWJzcGVjLCAuLi5yZXN0fSA9IHNwZWM7XG4gIHJldHVybiB7XG4gICAgLi4ucmVzdCxcbiAgICBzcGVjOiBub3JtYWxpemUoc3Vic3BlYywgY29uZmlnKVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWQ29uY2F0KHNwZWM6IEdlbmVyaWNWQ29uY2F0U3BlYzxDb21wb3NpdGVVbml0U3BlYz4sIGNvbmZpZzogQ29uZmlnKTogQ29uY2F0U3BlYyB7XG4gIGNvbnN0IHt2Y29uY2F0OiB2Y29uY2F0LCAuLi5yZXN0fSA9IHNwZWM7XG4gIHJldHVybiB7XG4gICAgLi4ucmVzdCxcbiAgICB2Y29uY2F0OiB2Y29uY2F0Lm1hcCgoc3Vic3BlYykgPT4gbm9ybWFsaXplKHN1YnNwZWMsIGNvbmZpZykpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhDb25jYXQoc3BlYzogR2VuZXJpY0hDb25jYXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPiwgY29uZmlnOiBDb25maWcpOiBDb25jYXRTcGVjIHtcbiAgY29uc3Qge2hjb25jYXQ6IGhjb25jYXQsIC4uLnJlc3R9ID0gc3BlYztcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIGhjb25jYXQ6IGhjb25jYXQubWFwKChzdWJzcGVjKSA9PiBub3JtYWxpemUoc3Vic3BlYywgY29uZmlnKSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRmFjZXRlZFVuaXQoc3BlYzogRmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjLCBjb25maWc6IENvbmZpZyk6IEZhY2V0U3BlYyB7XG4gIC8vIE5ldyBlbmNvZGluZyBpbiB0aGUgaW5zaWRlIHNwZWMgc2hvdWxkIG5vdCBjb250YWluIHJvdyAvIGNvbHVtblxuICAvLyBhcyByb3cvY29sdW1uIHNob3VsZCBiZSBtb3ZlZCB0byBmYWNldFxuICBjb25zdCB7cm93OiByb3csIGNvbHVtbjogY29sdW1uLCAuLi5lbmNvZGluZ30gPSBzcGVjLmVuY29kaW5nO1xuXG4gIC8vIE1hcmsgYW5kIGVuY29kaW5nIHNob3VsZCBiZSBtb3ZlZCBpbnRvIHRoZSBpbm5lciBzcGVjXG4gIGNvbnN0IHttYXJrLCB3aWR0aCwgcHJvamVjdGlvbiwgaGVpZ2h0LCBzZWxlY3Rpb24sIGVuY29kaW5nOiBfLCAuLi5vdXRlclNwZWN9ID0gc3BlYztcblxuICByZXR1cm4ge1xuICAgIC4uLm91dGVyU3BlYyxcbiAgICBmYWNldDoge1xuICAgICAgLi4uKHJvdyA/IHtyb3d9IDoge30pLFxuICAgICAgLi4uKGNvbHVtbiA/IHtjb2x1bW59OiB7fSksXG4gICAgfSxcbiAgICBzcGVjOiBub3JtYWxpemVOb25GYWNldFVuaXQoe1xuICAgICAgLi4uKHByb2plY3Rpb24gPyB7cHJvamVjdGlvbn0gOiB7fSksXG4gICAgICBtYXJrLFxuICAgICAgLi4uKHdpZHRoID8ge3dpZHRofSA6IHt9KSxcbiAgICAgIC4uLihoZWlnaHQgPyB7aGVpZ2h0fSA6IHt9KSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgLi4uKHNlbGVjdGlvbiA/IHtzZWxlY3Rpb259IDoge30pXG4gICAgfSwgY29uZmlnKVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc05vbkZhY2V0VW5pdFNwZWNXaXRoUHJpbWl0aXZlTWFyayhzcGVjOiBHZW5lcmljVW5pdFNwZWM8RW5jb2Rpbmc8RmllbGQ+LCBBbnlNYXJrPik6XG4gIHNwZWMgaXMgR2VuZXJpY1VuaXRTcGVjPEVuY29kaW5nPEZpZWxkPiwgTWFyaz4ge1xuICAgIHJldHVybiBpc1ByaW1pdGl2ZU1hcmsoc3BlYy5tYXJrKTtcbn1cblxuXG5mdW5jdGlvbiBub3JtYWxpemVOb25GYWNldFVuaXQoc3BlYzogR2VuZXJpY1VuaXRTcGVjPEVuY29kaW5nPEZpZWxkPiwgQW55TWFyaz4sIGNvbmZpZzogQ29uZmlnKSB7XG4gIGlmIChpc05vbkZhY2V0VW5pdFNwZWNXaXRoUHJpbWl0aXZlTWFyayhzcGVjKSkge1xuICAgIC8vIFRPRE86IHRob3JvdWdobHkgdGVzdFxuICAgIGlmIChpc1JhbmdlZChzcGVjLmVuY29kaW5nKSkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVJhbmdlZFVuaXQoc3BlYyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcmxheUNvbmZpZzogT3ZlcmxheUNvbmZpZyA9IGNvbmZpZyAmJiBjb25maWcub3ZlcmxheTtcbiAgICBjb25zdCBvdmVybGF5V2l0aExpbmUgPSBvdmVybGF5Q29uZmlnICYmIHNwZWMubWFyayA9PT0gQVJFQSAmJlxuICAgICAgY29udGFpbnMoWydsaW5lcG9pbnQnLCAnbGluZSddLCBvdmVybGF5Q29uZmlnLmFyZWEpO1xuICAgIGNvbnN0IG92ZXJsYXlXaXRoUG9pbnQgPSBvdmVybGF5Q29uZmlnICYmIChcbiAgICAgIChvdmVybGF5Q29uZmlnLmxpbmUgJiYgc3BlYy5tYXJrID09PSBMSU5FKSB8fFxuICAgICAgKG92ZXJsYXlDb25maWcuYXJlYSA9PT0gJ2xpbmVwb2ludCcgJiYgc3BlYy5tYXJrID09PSBBUkVBKVxuICAgICk7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgbW92aW5nIHRoaXMgdG8gYmVjb21lIGFub3RoZXIgY2FzZSBvZiBjb21wb3NpdGVNYXJrXG4gICAgaWYgKG92ZXJsYXlXaXRoUG9pbnQgfHwgb3ZlcmxheVdpdGhMaW5lKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplT3ZlcmxheShzcGVjLCBvdmVybGF5V2l0aFBvaW50LCBvdmVybGF5V2l0aExpbmUsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwZWM7IC8vIE5vdGhpbmcgdG8gbm9ybWFsaXplXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBvc2l0ZU1hcmsubm9ybWFsaXplKHNwZWMsIGNvbmZpZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUmFuZ2VkVW5pdChzcGVjOiBVbml0U3BlYykge1xuICBjb25zdCBoYXNYID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIFgpO1xuICBjb25zdCBoYXNZID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIFkpO1xuICBjb25zdCBoYXNYMiA9IGNoYW5uZWxIYXNGaWVsZChzcGVjLmVuY29kaW5nLCBYMik7XG4gIGNvbnN0IGhhc1kyID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIFkyKTtcbiAgaWYgKChoYXNYMiAmJiAhaGFzWCkgfHwgKGhhc1kyICYmICFoYXNZKSkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRTcGVjID0gZHVwbGljYXRlKHNwZWMpO1xuICAgIGlmIChoYXNYMiAmJiAhaGFzWCkge1xuICAgICAgbm9ybWFsaXplZFNwZWMuZW5jb2RpbmcueCA9IG5vcm1hbGl6ZWRTcGVjLmVuY29kaW5nLngyO1xuICAgICAgZGVsZXRlIG5vcm1hbGl6ZWRTcGVjLmVuY29kaW5nLngyO1xuICAgIH1cbiAgICBpZiAoaGFzWTIgJiYgIWhhc1kpIHtcbiAgICAgIG5vcm1hbGl6ZWRTcGVjLmVuY29kaW5nLnkgPSBub3JtYWxpemVkU3BlYy5lbmNvZGluZy55MjtcbiAgICAgIGRlbGV0ZSBub3JtYWxpemVkU3BlYy5lbmNvZGluZy55MjtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZFNwZWM7XG4gIH1cbiAgcmV0dXJuIHNwZWM7XG59XG5cblxuLy8gRklYTUUoIzE4MDQpOiByZS1kZXNpZ24gdGhpc1xuZnVuY3Rpb24gbm9ybWFsaXplT3ZlcmxheShzcGVjOiBVbml0U3BlYywgb3ZlcmxheVdpdGhQb2ludDogYm9vbGVhbiwgb3ZlcmxheVdpdGhMaW5lOiBib29sZWFuLCBjb25maWc6IENvbmZpZyk6IExheWVyU3BlYyB7XG4gIC8vIF8gaXMgdXNlZCB0byBkZW5vdGUgYSBkcm9wcGVkIHByb3BlcnR5IG9mIHRoZSB1bml0IHNwZWNcbiAgLy8gd2hpY2ggc2hvdWxkIG5vdCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIGxheWVyIHNwZWNcbiAgY29uc3Qge21hcmssIHNlbGVjdGlvbiwgcHJvamVjdGlvbiwgZW5jb2RpbmcsIC4uLm91dGVyU3BlY30gPSBzcGVjO1xuICBjb25zdCBsYXllciA9IFt7bWFyaywgZW5jb2Rpbmd9IGFzIFVuaXRTcGVjXTtcblxuICAvLyBOZWVkIHRvIGNvcHkgc3RhY2sgY29uZmlnIHRvIG92ZXJsYXllZCBsYXllclxuICBjb25zdCBzdGFja1Byb3BzID0gc3RhY2sobWFyaywgZW5jb2RpbmcsIGNvbmZpZyA/IGNvbmZpZy5zdGFjayA6IHVuZGVmaW5lZCk7XG5cbiAgbGV0IG92ZXJsYXlFbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoc3RhY2tQcm9wcykge1xuICAgIGNvbnN0IHtmaWVsZENoYW5uZWw6IHN0YWNrRmllbGRDaGFubmVsLCBvZmZzZXR9ID0gc3RhY2tQcm9wcztcbiAgICBvdmVybGF5RW5jb2RpbmcgPSB7XG4gICAgICAuLi5lbmNvZGluZyxcbiAgICAgIFtzdGFja0ZpZWxkQ2hhbm5lbF06IHtcbiAgICAgICAgLi4uZW5jb2Rpbmdbc3RhY2tGaWVsZENoYW5uZWxdLFxuICAgICAgICAuLi4ob2Zmc2V0ID8ge3N0YWNrOiBvZmZzZXR9IDoge30pXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChvdmVybGF5V2l0aExpbmUpIHtcbiAgICBsYXllci5wdXNoKHtcbiAgICAgIC4uLihwcm9qZWN0aW9uID8ge3Byb2plY3Rpb259IDoge30pLFxuICAgICAgbWFyazoge1xuICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgIHN0eWxlOiAnbGluZU92ZXJsYXknXG4gICAgICB9LFxuICAgICAgLi4uKHNlbGVjdGlvbiA/IHtzZWxlY3Rpb259IDoge30pLFxuICAgICAgZW5jb2Rpbmc6IG92ZXJsYXlFbmNvZGluZ1xuICAgIH0pO1xuICB9XG4gIGlmIChvdmVybGF5V2l0aFBvaW50KSB7XG4gICAgbGF5ZXIucHVzaCh7XG4gICAgICAuLi4ocHJvamVjdGlvbiA/IHtwcm9qZWN0aW9ufSA6IHt9KSxcbiAgICAgIG1hcms6IHtcbiAgICAgICAgdHlwZTogJ3BvaW50JyxcbiAgICAgICAgZmlsbGVkOiB0cnVlLFxuICAgICAgICBzdHlsZTogJ3BvaW50T3ZlcmxheSdcbiAgICAgIH0sXG4gICAgICAuLi4oc2VsZWN0aW9uID8ge3NlbGVjdGlvbn0gOiB7fSksXG4gICAgICBlbmNvZGluZzogb3ZlcmxheUVuY29kaW5nXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLm91dGVyU3BlYyxcbiAgICBsYXllclxuICB9O1xufVxuXG4vLyBUT0RPOiBhZGQgdmwuc3BlYy52YWxpZGF0ZSAmIG1vdmUgc3R1ZmYgZnJvbSB2bC52YWxpZGF0ZSB0byBoZXJlXG5cbi8qIEFjY3VtdWxhdGUgbm9uLWR1cGxpY2F0ZSBmaWVsZERlZnMgaW4gYSBkaWN0aW9uYXJ5ICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlKGRpY3Q6IGFueSwgZGVmczogRmllbGREZWY8RmllbGQ+W10pOiBhbnkge1xuICBkZWZzLmZvckVhY2goZnVuY3Rpb24oZmllbGREZWYpIHtcbiAgICAvLyBDb25zaWRlciBvbmx5IHB1cmUgZmllbGREZWYgcHJvcGVydGllcyAoaWdub3Jpbmcgc2NhbGUsIGF4aXMsIGxlZ2VuZClcbiAgICBjb25zdCBwdXJlRmllbGREZWYgPSBbJ2ZpZWxkJywgJ3R5cGUnLCAndmFsdWUnLCAndGltZVVuaXQnLCAnYmluJywgJ2FnZ3JlZ2F0ZSddLnJlZHVjZSgoZiwga2V5KSA9PiB7XG4gICAgICBpZiAoZmllbGREZWZba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZba2V5XSA9IGZpZWxkRGVmW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gZjtcbiAgICB9LCB7fSk7XG4gICAgY29uc3Qga2V5ID0gaGFzaChwdXJlRmllbGREZWYpO1xuICAgIGRpY3Rba2V5XSA9IGRpY3Rba2V5XSB8fCBmaWVsZERlZjtcbiAgfSk7XG4gIHJldHVybiBkaWN0O1xufVxuXG4vKiBSZWN1cnNpdmVseSBnZXQgZmllbGREZWZzIGZyb20gYSBzcGVjLCByZXR1cm5zIGEgZGljdGlvbmFyeSBvZiBmaWVsZERlZnMgKi9cbmZ1bmN0aW9uIGZpZWxkRGVmSW5kZXg8VD4oc3BlYzogR2VuZXJpY1NwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4sIGRpY3Q6IERpY3Q8RmllbGREZWY8VD4+ID0ge30pOiBEaWN0PEZpZWxkRGVmPFQ+PiB7XG4gIC8vIEZJWE1FKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2EtbGl0ZS9pc3N1ZXMvMjIwNyk6IFN1cHBvcnQgZmllbGREZWZJbmRleCBmb3IgcmVwZWF0XG4gIGlmIChpc0xheWVyU3BlYyhzcGVjKSkge1xuICAgIHNwZWMubGF5ZXIuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICBpZiAoaXNVbml0U3BlYyhsYXllcikpIHtcbiAgICAgICAgYWNjdW11bGF0ZShkaWN0LCB2bEVuY29kaW5nLmZpZWxkRGVmcyhsYXllci5lbmNvZGluZykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGREZWZJbmRleChsYXllciwgZGljdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGYWNldFNwZWMoc3BlYykpIHtcbiAgICBhY2N1bXVsYXRlKGRpY3QsIHZsRW5jb2RpbmcuZmllbGREZWZzKHNwZWMuZmFjZXQpKTtcbiAgICBmaWVsZERlZkluZGV4KHNwZWMuc3BlYywgZGljdCk7XG4gIH0gZWxzZSBpZiAoaXNSZXBlYXRTcGVjKHNwZWMpKSB7XG4gICAgZmllbGREZWZJbmRleChzcGVjLnNwZWMsIGRpY3QpO1xuICB9IGVsc2UgaWYgKGlzQ29uY2F0U3BlYyhzcGVjKSkge1xuICAgIGNvbnN0IGNoaWxkU3BlYyA9IGlzVkNvbmNhdFNwZWMoc3BlYykgPyBzcGVjLnZjb25jYXQgOiBzcGVjLmhjb25jYXQ7XG4gICAgY2hpbGRTcGVjLmZvckVhY2goY2hpbGQgPT4gZmllbGREZWZJbmRleChjaGlsZCwgZGljdCkpO1xuICB9IGVsc2UgeyAvLyBVbml0IFNwZWNcbiAgICBhY2N1bXVsYXRlKGRpY3QsIHZsRW5jb2RpbmcuZmllbGREZWZzKHNwZWMuZW5jb2RpbmcpKTtcbiAgfVxuICByZXR1cm4gZGljdDtcbn1cblxuLyogUmV0dXJucyBhbGwgbm9uLWR1cGxpY2F0ZSBmaWVsZERlZnMgaW4gYSBzcGVjIGluIGEgZmxhdCBhcnJheSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkRGVmcyhzcGVjOiBHZW5lcmljU3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+Pik6IEZpZWxkRGVmPGFueT5bXSB7XG4gIHJldHVybiB2YWxzKGZpZWxkRGVmSW5kZXgoc3BlYykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdGFja2VkKHNwZWM6IFRvcExldmVsPEZhY2V0ZWRDb21wb3NpdGVVbml0U3BlYz4sIGNvbmZpZz86IENvbmZpZyk6IGJvb2xlYW4ge1xuICBjb25maWcgPSBjb25maWcgfHwgc3BlYy5jb25maWc7XG4gIGlmIChpc1ByaW1pdGl2ZU1hcmsoc3BlYy5tYXJrKSkge1xuICAgIHJldHVybiBzdGFjayhzcGVjLm1hcmssIHNwZWMuZW5jb2RpbmcsXG4gICAgICAgICAgICBjb25maWcgPyBjb25maWcuc3RhY2sgOiB1bmRlZmluZWRcbiAgICAgICAgICApICE9PSBudWxsO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==