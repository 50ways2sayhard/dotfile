"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vega_util_1 = require("vega-util");
var util_1 = require("./util");
var AGGREGATE_OP_INDEX = {
    values: 1,
    count: 1,
    valid: 1,
    missing: 1,
    distinct: 1,
    sum: 1,
    mean: 1,
    average: 1,
    variance: 1,
    variancep: 1,
    stdev: 1,
    stdevp: 1,
    median: 1,
    q1: 1,
    q3: 1,
    ci0: 1,
    ci1: 1,
    min: 1,
    max: 1,
    argmin: 1,
    argmax: 1,
};
exports.AGGREGATE_OPS = util_1.flagKeys(AGGREGATE_OP_INDEX);
function isAggregateOp(a) {
    return !!AGGREGATE_OP_INDEX[a];
}
exports.isAggregateOp = isAggregateOp;
exports.COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
function isCountingAggregateOp(aggregate) {
    return aggregate && util_1.contains(exports.COUNTING_OPS, aggregate);
}
exports.isCountingAggregateOp = isCountingAggregateOp;
/** Additive-based aggregation operations.  These can be applied to stack. */
exports.SUM_OPS = [
    'count',
    'sum',
    'distinct',
    'valid',
    'missing'
];
/**
 * Aggregation operators that always produce values within the range [domainMin, domainMax].
 */
exports.SHARED_DOMAIN_OPS = [
    'mean',
    'average',
    'median',
    'q1',
    'q3',
    'min',
    'max',
];
exports.SHARED_DOMAIN_OP_INDEX = vega_util_1.toSet(exports.SHARED_DOMAIN_OPS);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FnZ3JlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFnQztBQUNoQywrQkFBZ0Q7QUFTaEQsSUFBTSxrQkFBa0IsR0FBc0I7SUFDNUMsTUFBTSxFQUFFLENBQUM7SUFDVCxLQUFLLEVBQUUsQ0FBQztJQUNSLEtBQUssRUFBRSxDQUFDO0lBQ1IsT0FBTyxFQUFFLENBQUM7SUFDVixRQUFRLEVBQUUsQ0FBQztJQUNYLEdBQUcsRUFBRSxDQUFDO0lBQ04sSUFBSSxFQUFFLENBQUM7SUFDUCxPQUFPLEVBQUUsQ0FBQztJQUNWLFFBQVEsRUFBRSxDQUFDO0lBQ1gsU0FBUyxFQUFFLENBQUM7SUFDWixLQUFLLEVBQUUsQ0FBQztJQUNSLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxFQUFFLEVBQUUsQ0FBQztJQUNMLEVBQUUsRUFBRSxDQUFDO0lBQ0wsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixNQUFNLEVBQUUsQ0FBQztJQUNULE1BQU0sRUFBRSxDQUFDO0NBQ1YsQ0FBQztBQUVXLFFBQUEsYUFBYSxHQUFHLGVBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTFELHVCQUE4QixDQUFTO0lBQ3JDLE1BQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUZELHNDQUVDO0FBRVksUUFBQSxZQUFZLEdBQWtCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFckYsK0JBQXNDLFNBQWlCO0lBQ3JELE1BQU0sQ0FBQyxTQUFTLElBQUksZUFBUSxDQUFDLG9CQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUZELHNEQUVDO0FBRUQsNkVBQTZFO0FBQ2hFLFFBQUEsT0FBTyxHQUFrQjtJQUNsQyxPQUFPO0lBQ1AsS0FBSztJQUNMLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztDQUNaLENBQUM7QUFFRjs7R0FFRztBQUNVLFFBQUEsaUJBQWlCLEdBQWtCO0lBQzVDLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLElBQUk7SUFDSixJQUFJO0lBQ0osS0FBSztJQUNMLEtBQUs7Q0FDUixDQUFDO0FBRVcsUUFBQSxzQkFBc0IsR0FBRyxpQkFBSyxDQUFDLHlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RvU2V0fSBmcm9tICd2ZWdhLXV0aWwnO1xuaW1wb3J0IHtjb250YWlucywgRmxhZywgZmxhZ0tleXN9IGZyb20gJy4vdXRpbCc7XG5cblxuZXhwb3J0IHR5cGUgQWdncmVnYXRlT3AgPSAnYXJnbWF4JyB8ICdhcmdtaW4nIHwgJ2F2ZXJhZ2UnIHwgJ2NvdW50J1xuICB8ICdkaXN0aW5jdCcgfCAnbWF4JyB8ICdtZWFuJyB8ICdtZWRpYW4nIHwgJ21pbicgfCAnbWlzc2luZydcbiAgfCAncTEnIHwgJ3EzJyB8ICdjaTAnIHwgJ2NpMScgfCAnc3RkZXYnIHwgJ3N0ZGV2cCcgfCAnc3VtJyB8ICd2YWxpZCcgfCAndmFsdWVzJyB8ICd2YXJpYW5jZSdcbiAgfCAndmFyaWFuY2VwJztcblxuXG5jb25zdCBBR0dSRUdBVEVfT1BfSU5ERVg6IEZsYWc8QWdncmVnYXRlT3A+ID0ge1xuICB2YWx1ZXM6IDEsXG4gIGNvdW50OiAxLFxuICB2YWxpZDogMSxcbiAgbWlzc2luZzogMSxcbiAgZGlzdGluY3Q6IDEsXG4gIHN1bTogMSxcbiAgbWVhbjogMSxcbiAgYXZlcmFnZTogMSxcbiAgdmFyaWFuY2U6IDEsXG4gIHZhcmlhbmNlcDogMSxcbiAgc3RkZXY6IDEsXG4gIHN0ZGV2cDogMSxcbiAgbWVkaWFuOiAxLFxuICBxMTogMSxcbiAgcTM6IDEsXG4gIGNpMDogMSxcbiAgY2kxOiAxLFxuICBtaW46IDEsXG4gIG1heDogMSxcbiAgYXJnbWluOiAxLFxuICBhcmdtYXg6IDEsXG59O1xuXG5leHBvcnQgY29uc3QgQUdHUkVHQVRFX09QUyA9IGZsYWdLZXlzKEFHR1JFR0FURV9PUF9JTkRFWCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FnZ3JlZ2F0ZU9wKGE6IHN0cmluZyk6IGEgaXMgQWdncmVnYXRlT3Age1xuICByZXR1cm4gISFBR0dSRUdBVEVfT1BfSU5ERVhbYV07XG59XG5cbmV4cG9ydCBjb25zdCBDT1VOVElOR19PUFM6IEFnZ3JlZ2F0ZU9wW10gPSBbJ2NvdW50JywgJ3ZhbGlkJywgJ21pc3NpbmcnLCAnZGlzdGluY3QnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ291bnRpbmdBZ2dyZWdhdGVPcChhZ2dyZWdhdGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gYWdncmVnYXRlICYmIGNvbnRhaW5zKENPVU5USU5HX09QUywgYWdncmVnYXRlKTtcbn1cblxuLyoqIEFkZGl0aXZlLWJhc2VkIGFnZ3JlZ2F0aW9uIG9wZXJhdGlvbnMuICBUaGVzZSBjYW4gYmUgYXBwbGllZCB0byBzdGFjay4gKi9cbmV4cG9ydCBjb25zdCBTVU1fT1BTOiBBZ2dyZWdhdGVPcFtdID0gW1xuICAgICdjb3VudCcsXG4gICAgJ3N1bScsXG4gICAgJ2Rpc3RpbmN0JyxcbiAgICAndmFsaWQnLFxuICAgICdtaXNzaW5nJ1xuXTtcblxuLyoqXG4gKiBBZ2dyZWdhdGlvbiBvcGVyYXRvcnMgdGhhdCBhbHdheXMgcHJvZHVjZSB2YWx1ZXMgd2l0aGluIHRoZSByYW5nZSBbZG9tYWluTWluLCBkb21haW5NYXhdLlxuICovXG5leHBvcnQgY29uc3QgU0hBUkVEX0RPTUFJTl9PUFM6IEFnZ3JlZ2F0ZU9wW10gPSBbXG4gICAgJ21lYW4nLFxuICAgICdhdmVyYWdlJyxcbiAgICAnbWVkaWFuJyxcbiAgICAncTEnLFxuICAgICdxMycsXG4gICAgJ21pbicsXG4gICAgJ21heCcsXG5dO1xuXG5leHBvcnQgY29uc3QgU0hBUkVEX0RPTUFJTl9PUF9JTkRFWCA9IHRvU2V0KFNIQVJFRF9ET01BSU5fT1BTKTtcbiJdfQ==