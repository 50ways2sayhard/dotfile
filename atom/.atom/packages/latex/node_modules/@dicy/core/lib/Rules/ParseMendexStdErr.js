'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParsedMendexStdErr extends _Rule2.default {

  /**
   * Parse the mendex log.
   * @return {Promise<boolean>}  Status of rule evaluation
   */
  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      // Get the output file
      const output = yield _this.getResolvedOutput('$DIR_0/$NAME_0.log-ParsedMendexStdErr');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };
      let name = 'mendex';

      yield _this.firstParameter.parse([{
        // Get the name
        names: ['text'],
        patterns: [/^This is (upmendex|mendex) /i],
        evaluate: function (reference, groups) {
          name = groups.name;
        }
      }, {
        // Dictionary Error
        names: ['name', 'text'],
        patterns: [/^(upmendex|mendex): (.*? is forbidden to open for reading\.)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name: groups.name,
            severity: 'error',
            text: groups.text
          });
        }
      }, {
        // Missing file errors
        names: ['text'],
        patterns: [/^(No log file, .*?\.|.*? does not exist\.)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name,
            severity: 'error',
            text: groups.text
          });
        }
      }, {
        // Bad kanji encoding
        names: ['text'],
        patterns: [/^(Ignoring bad kanji encoding.*)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name,
            severity: 'warning',
            text: groups.text
          });
        }
      }]);

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParsedMendexStdErr;
ParsedMendexStdErr.parameterTypes = [new _set2.default(['MendexStdErr'])];
ParsedMendexStdErr.commands = new _set2.default(['build', 'log']);
ParsedMendexStdErr.description = 'Parses the error produced by all mendex variants.';
ParsedMendexStdErr.defaultActions = ['parse'];