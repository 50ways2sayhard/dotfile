'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _Log = require('../Log');

var _Log2 = _interopRequireDefault(_Log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WRAPPED_LINE_PATTERN = /^.{76}[^.]{3}$/;

class ParseLaTeXLog extends _Rule2.default {

  /**
   * Parse the latex log.
   * @return {Promise<boolean>}  Status of rule evaluation
   */
  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      // Get the output file
      const output = yield _this.getResolvedOutput('$FILEPATH_0-ParsedLaTeXLog');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };
      const name = _this.firstParameter.subType || 'LaTeX';
      const sourcePaths = [];

      yield _this.firstParameter.parse([{
        // Ignore intro line
        patterns: [/^This is/],
        evaluate: function (reference, groups) {}
      }, {
        // Input file name
        names: ['filePath'],
        patterns: [/^\*\*([^*]+)$/],
        evaluate: function (reference, groups) {
          // Don't let subsequent lines overwrite the first.
          if (!sourcePaths.length === 0) {
            sourcePaths.unshift(_this.normalizePath(groups.filePath));
          }
        }
      }, {
        // Package info message
        names: ['text'],
        patterns: [/^Package: (.*)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name,
            severity: 'info',
            text: groups.text,
            source: { file: sourcePaths[0] },
            log: reference
          });
        }
      }, {
        // Error messages when -file-line-error is off or no file reference is
        // included.
        names: ['category', 'text'],
        patterns: [/^! (.+) Error: (.+?)\.?$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            severity: 'error',
            name,
            category: groups.category,
            text: groups.text,
            source: { file: sourcePaths[0] },
            log: reference
          });
        }
      }, {
        // Error messages when -file-line-error is on and file reference is
        // available.
        names: ['file', 'line', 'category', 'text'],
        patterns: [/^(\S.*):(\d+): (?:(.+) Error: )?(.+?)\.?$/i],
        evaluate: function (reference, groups) {
          const line = parseInt(groups.line, 10);
          const message = {
            severity: 'error',
            name,
            text: groups.text,
            log: reference,
            source: {
              file: _this.normalizePath(groups.file),
              range: { start: line, end: line }
            }
          };

          if (groups.category) message.category = groups.category;

          parsedLog.messages.push(message);
        }
      }, {
        // Warning/Info messages, possibly with a line reference.
        names: ['category', 'severity', 'text', 'line'],
        patterns: [/^(.+) (Warning|Info): +(.*?)(?: on input line (\d+)\.)?$/i],
        evaluate: function (reference, groups) {
          const message = {
            severity: groups.severity.toLowerCase(),
            name,
            category: groups.category,
            text: groups.text,
            source: { file: sourcePaths[0] },
            log: reference

            // There is a line reference so add it to the message.
          };if (groups.line) {
            const line = parseInt(groups.line, 10);

            message.source = {
              file: sourcePaths[0],
              range: { start: line, end: line }
            };
          }

          parsedLog.messages.push(message);
        }
      }, {
        // Continuation of message with possible file reference.
        names: ['package', 'text', 'line'],
        patterns: [/^\(([^()]+)\) {2,}(.*?)(?: on input line (\d+)\.?)?$/],
        evaluate: function (reference, groups) {
          const message = parsedLog.messages[parsedLog.messages.length - 1];
          // Verify that the previous message matches the category.
          if (message && message.category && message.category.endsWith(groups.package)) {
            message.text = `${message.text} ${groups.text}`;
            // If the previous message has a log reference then extend it.
            if (message.log && message.log.range && reference.range) {
              message.log.range.end = reference.range.end;
            }
            // If there is a line reference then add it the the message.
            if (groups.line) {
              const line = parseInt(groups.line, 10);

              message.text = `${message.text}.`;
              message.source = {
                file: sourcePaths[0],
                range: { start: line, end: line }
              };
            }
          }
        }
      }, {
        // LaTeX3 error messages when -file-line-error is on
        names: ['file', 'line', 'category', 'text'],
        patterns: [/^!{48,50}$/, /^!$/, /^(.*):(\d+): (?:(.+) error: )?(.+?)\.?$/],
        evaluate: function (reference, groups) {
          const line = parseInt(groups.line, 10);
          const message = {
            severity: 'error',
            name,
            source: {
              file: _this.normalizePath(groups.file),
              range: { start: line, end: line }
            },
            text: groups.text,
            log: reference
          };

          if (groups.category) message.category = groups.category;

          parsedLog.messages.push(message);
        }
      }, {
        // LaTeX3 messages
        names: ['category', 'severity', 'text'],
        patterns: [/^[.*!]{48,50}$/, /^[.*!] (.*?) (info|warning|error): ("[^"]*")$/],
        evaluate: function (reference, groups) {
          const message = {
            severity: groups.severity,
            name,
            category: groups.category,
            source: { file: sourcePaths[0] },
            text: groups.text,
            log: reference
          };

          parsedLog.messages.push(message);
        }
      }, {
        // LaTeX3 continued message
        names: ['text', 'line'],
        patterns: [/^[.*!] (.*?)(?: on line (\d+)\.?)?$/],
        evaluate: function (reference, groups) {
          const message = parsedLog.messages[parsedLog.messages.length - 1];
          if (message && message.log && message.log.range && reference.range) {
            // Don't add input requests to the message.
            if (groups.text !== 'Type <return> to continue.') {
              message.text = `${message.text} ${groups.text.trim() || '\n'}`;
            }
            // If the the previous message has a log reference then extend it.
            if (message.log && message.log.range && reference.range) {
              message.log.range.end = reference.range.end;
            }
            // If there is a line reference then add it to the message.
            if (groups.line) {
              const line = parseInt(groups.line, 10);

              message.text = `${message.text}.`;
              message.source = {
                file: sourcePaths[0],
                range: { start: line, end: line }
              };
            }
          }
        }
      }, {
        // End of LaTeX3 message
        names: [],
        patterns: [/^[.*!]{48,50} *$/],
        evaluate: function (reference, groups) {
          const message = parsedLog.messages[parsedLog.messages.length - 1];
          // If the the previous message has a log reference then extend it.
          if (message && message.log && message.log.range && reference.range) {
            message.log.range.end = reference.range.end;
          }
        }
      }, {
        // Missing file warning.
        names: ['text'],
        patterns: [/^(No file .*\.)$/],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            severity: 'warning',
            name,
            text: groups.text,
            log: reference
          });
        }
      }, {
        // makeidx/splitidx messages.
        names: ['text'],
        patterns: [/^(Writing index file.*|Using splitted index at.*|Started index file .*)$/],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            severity: 'info',
            name,
            text: groups.text,
            log: reference
          });
        }
      }, {
        // Output file message. This is especially important for XeLaTeX since
        // it does not put the output PDF file name into the FLS file.
        names: ['filePath'],
        patterns: [/^Output written on "?([^"]+)"? \([^)]*\)\.$/],
        evaluate: function (reference, groups) {
          // Sometimes XeLaTeX uses astricks instead of spaces in output path.
          parsedLog.outputs.push(_this.normalizePath(groups.filePath.replace(/\*/g, ' ')));
        }
      }, {
        // Run system message.
        names: ['command', 'status'],
        patterns: [/^runsystem\((.*?)\)\.\.\.(.*?)\.$/],
        evaluate: function (reference, groups) {
          parsedLog.calls.push(_Log2.default.parseCall(groups.command, groups.status));
        }
      }, {
        // \input notification
        patterns: [/(\([^()[]+|\))/g],
        evaluate: function (reference, groups) {
          const trimPattern = /(^\([\s"]*|[\s"]+$)/g;
          for (const token of groups.captures) {
            if (token === ')') {
              // Avoid popping main source file off of the stack.
              if (sourcePaths.length > 1) {
                sourcePaths.shift();
              }
            } else {
              sourcePaths.unshift(_this.normalizePath(token.replace(trimPattern, '')));
            }
          }
        }
      }], function (line) {
        return WRAPPED_LINE_PATTERN.test(line);
      });

      // Clean the message text up.
      for (const message of parsedLog.messages) {
        message.text = message.text.trim().replace(/ *\n+ */g, '\n').replace(/ +/g, ' ');
      }

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParseLaTeXLog;
ParseLaTeXLog.parameterTypes = [new _set2.default(['LaTeXLog'])];
ParseLaTeXLog.commands = new _set2.default(['build', 'log']);
ParseLaTeXLog.description = 'Parses the logs produced by all latex variants.';
ParseLaTeXLog.defaultActions = ['parse'];