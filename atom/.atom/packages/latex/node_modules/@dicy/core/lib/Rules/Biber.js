'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Log = require('../Log');

var _Log2 = _interopRequireDefault(_Log);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Biber extends _Rule2.default {

  initialize() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      yield _this.getResolvedInputs(['$OUTDIR/$JOB.log-ParsedLaTeXLog', '$DIR_0/$NAME_0.blg-ParsedBiberLog']);
    })();
  }

  getFileActions(file) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      switch (file.type) {
        case 'ParsedLaTeXLog':
          const { name } = _path2.default.parse(_this2.firstParameter.filePath);
          if (file.value && _Log2.default.hasRunMessage(file.value, 'Biber', name)) {
            return ['run'];
          }
          break;
        case 'ParsedBiberLog':
          return ['updateDependencies'];
        default:
          return ['run'];
      }
      return [];
    })();
  }

  constructCommand() {
    return {
      args: ['biber', '{{$FILEPATH_0}}'],
      cd: '$ROOTDIR',
      severity: 'error',
      outputs: ['$DIR_0/$NAME_0.bbl', '$DIR_0/$NAME_0.blg']
    };
  }
}
exports.default = Biber;
Biber.parameterTypes = [new _set2.default(['BiberControlFile'])];
Biber.description = 'Runs Biber to process bibliography files (bib) when need is detected.';