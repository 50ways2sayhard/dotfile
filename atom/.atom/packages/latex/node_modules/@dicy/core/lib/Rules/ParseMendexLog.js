'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParsedMendexLog extends _Rule2.default {

  /**
   * Parse the mendex log.
   * @return {Promise<boolean>}  Status of rule evaluation
   */
  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      // Get the output file
      const output = yield _this.getResolvedOutput('$FILEPATH_0-ParsedMendexLog');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };
      const name = _this.firstParameter.subType || 'mendex';
      let filePath;

      yield _this.firstParameter.parse([{
        // Error/Warning messages
        names: ['severity', 'text', 'file', 'line'],
        patterns: [/^(Error|Warning): (.*?)(?: in (.*?), line ([0-9]+))?\.$/i],
        evaluate: function (reference, groups) {
          const message = {
            name,
            severity: groups.severity.toLowerCase(),
            text: groups.text,
            source: { file: filePath },
            log: reference

            // There is a line reference so add it to the message.
          };if (groups.line) {
            const line = parseInt(groups.line, 10);

            message.source = {
              file: _path2.default.normalize(groups.file),
              range: { start: line, end: line }
            };
          }

          parsedLog.messages.push(message);
        }
      }, {
        // Bad encap messages
        names: ['text', 'file', 'line'],
        patterns: [/^Bad encap string in (.*?), line ([0-9]+)\.$/i],
        evaluate: function (reference, groups) {
          const line = parseInt(groups.line, 10);
          parsedLog.messages.push({
            name,
            severity: 'error',
            text: groups.text,
            source: {
              file: _path2.default.normalize(groups.file),
              range: { start: line, end: line }
            },
            log: reference
          });
        }
      }, {
        // Coallator failure
        names: ['text'],
        patterns: [/^(\[ICU\] Collator creation failed.*)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name,
            severity: 'error',
            text: groups.text,
            source: { file: filePath },
            log: reference
          });
        }
      }, {
        // Entry report
        names: ['text'],
        patterns: [/^(.*? entries accepted, .*? rejected\.)$/i],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            name,
            severity: 'info',
            text: groups.text,
            source: { file: filePath },
            log: reference
          });
        }
      }, {
        // Input files
        names: ['file'],
        patterns: [/^Scanning (?:dictionary|environment dictionary|input) file (.*?)\.$/i],
        evaluate: function (reference, groups) {
          parsedLog.inputs.push(_path2.default.normalize(groups.file));
          parsedLog.messages.push({
            name,
            severity: 'info',
            text: groups._,
            source: { file: filePath },
            log: reference
          });
        }
      }, {
        // Output files
        names: ['file'],
        patterns: [/^Output written in (.*?)\.$/i],
        evaluate: function (reference, groups) {
          parsedLog.outputs.push(_path2.default.normalize(groups.file));
          parsedLog.messages.push({
            name,
            severity: 'info',
            text: groups._,
            source: { file: filePath },
            log: reference
          });
        }
      }]);

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParsedMendexLog;
ParsedMendexLog.parameterTypes = [new _set2.default(['MendexLog'])];
ParsedMendexLog.commands = new _set2.default(['build', 'log']);
ParsedMendexLog.description = 'Parses the logs produced by all mendex variants.';
ParsedMendexLog.defaultActions = ['parse'];