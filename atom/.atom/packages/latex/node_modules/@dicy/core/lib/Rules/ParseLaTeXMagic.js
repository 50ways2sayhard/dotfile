'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TRUE_PATTERN = /^(true|yes|enabled?)$/i;

const ITEM_SEPARATOR_PATTERN = /\s*,\s*/;

class ParseLaTeXMagic extends _Rule2.default {

  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const output = yield _this.getResolvedOutput('$FILEPATH_0-ParsedLaTeXMagic');
      const magic = {};

      yield _this.firstParameter.parse([{
        names: ['jobName', 'name', 'value'],
        patterns: [/^%\s*!T[eE]X\s+(?:([^:]+?)\s*:\s*)?(\$?\w+)\s*=\s*(.*?)\s*$/],
        evaluate: function (reference, groups) {
          const schema = _this.state.optionSchema.get(groups.name);
          let value = groups.value;

          if (schema) {
            // If we have a schema definition then use it to parse the value
            switch (schema.type) {
              case 'variable':
                if (ITEM_SEPARATOR_PATTERN.test(value)) {
                  value = value.split(ITEM_SEPARATOR_PATTERN);
                }
                break;
              case 'strings':
                value = value.split(ITEM_SEPARATOR_PATTERN);
                break;
              case 'number':
                value = parseInt(value, 10);
                break;
              case 'numbers':
                value = value.split(ITEM_SEPARATOR_PATTERN).map(function (x) {
                  return parseInt(x, 10);
                });
                break;
              case 'boolean':
                value = TRUE_PATTERN.test(value);
                break;
            }
          }

          let jobMagic = magic;

          if (groups.jobName) {
            // There is a job name specified so create a jobs object.
            if (!('jobs' in magic)) magic.jobs = {};

            if (groups.jobName in magic.jobs) {
              jobMagic = magic.jobs[groups.jobName];
            } else {
              magic.jobs[groups.jobName] = jobMagic = {};
            }
          }

          // Assign the value
          jobMagic[groups.name] = value;
        }
      }]);

      if (output) output.value = magic;

      return true;
    })();
  }
}
exports.default = ParseLaTeXMagic;
ParseLaTeXMagic.commands = new _set2.default(['load']);
ParseLaTeXMagic.parameterTypes = [new _set2.default(['LaTeX', 'LiterateAgda', 'LiterateHaskell', 'PythonNoWeb', 'RNoWeb'])];
ParseLaTeXMagic.defaultActions = ['parse'];
ParseLaTeXMagic.description = 'Parses Magic comments in LaTeX or knitr documents.';