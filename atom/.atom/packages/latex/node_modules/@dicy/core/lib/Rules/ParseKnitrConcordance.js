'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WRAPPED_LINE_PATTERN = /%$/;

class ParseKnitrConcordance extends _Rule2.default {

  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const outputFile = yield _this.getResolvedOutput('$FILEPATH_0-ParsedSourceMap');
      if (!outputFile) return false;

      const sourceMaps = {
        maps: []
      };

      yield _this.firstParameter.parse([{
        names: ['output', 'input', 'indicies'],
        patterns: [/^\\Sconcordance\{concordance:([^:]*):([^:]*):([^}]*)\}$/],
        evaluate: function (references, groups) {
          // Split up the indicies in preparation to decode the RLE array.
          const encodedIndicies = groups.indicies.split(/\s+/).map(function (x) {
            return parseInt(x);
          });
          const mappings = [];
          let inputLine = 1;
          let outputLine = 1;

          // Decode the RLE into input/output ranges
          for (let i = 1; i < encodedIndicies.length; i += 2) {
            for (let j = 0; j < encodedIndicies[i]; j++, outputLine++, inputLine += encodedIndicies[i + 1]) {
              const start = inputLine;
              const end = inputLine + encodedIndicies[i + 1] - 1;

              if (start <= end) {
                mappings.push({
                  input: { start, end },
                  output: { start: outputLine, end: outputLine }
                });
              }
            }
          }

          sourceMaps.maps.push({
            input: groups.input,
            output: groups.output,
            mappings
          });
        }
      }], function (line) {
        return WRAPPED_LINE_PATTERN.test(line);
      });

      outputFile.value = sourceMaps;

      return true;
    })();
  }
}
exports.default = ParseKnitrConcordance;
ParseKnitrConcordance.parameterTypes = [new _set2.default(['KnitrConcordance'])];
ParseKnitrConcordance.commands = new _set2.default(['build', 'log']);
ParseKnitrConcordance.defaultActions = ['parse'];
ParseKnitrConcordance.description = 'Parses any knitr concordance files.';