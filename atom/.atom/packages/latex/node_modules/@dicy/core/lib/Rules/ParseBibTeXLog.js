'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseBibTeXLog extends _Rule2.default {

  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const output = yield _this.getResolvedOutput('$FILEPATH_0-ParsedBibTeXLog');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };
      const name = _this.firstParameter.subType === '8-bit Big BibTeX' ? 'BibTeX8' : _this.firstParameter.subType || 'BibTeX';

      yield _this.firstParameter.parse([{
        // Missing database files or missing cross references.
        names: ['text'],
        patterns: [/^(I couldn't open (?:auxiliary|database) file .*|A bad cross reference---entry .*)$/],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            severity: 'error',
            name,
            text: groups.text,
            log: reference
          });
        }
      }, {
        // Warning messages
        names: ['text'],
        patterns: [/^Warning--(.+)$/],
        evaluate: function (reference, groups) {
          parsedLog.messages.push({
            severity: 'warning',
            name,
            text: groups.text,
            log: reference
          });
        }
      }, {
        // Continued source references.
        names: ['line', 'file'],
        patterns: [/^-+line (\d+) of file (.+)$/],
        evaluate: function (reference, groups) {
          const message = parsedLog.messages[parsedLog.messages.length - 1];
          if (message) {
            const line = parseInt(groups.line, 10);

            // Extend the log reference
            if (message.log && message.log.range && reference.range) message.log.range.end = reference.range.start;

            // Add a source reference
            message.source = {
              file: _this.normalizePath(groups.file),
              range: {
                start: line,
                end: line
              }
            };
          }
        }
      }, {
        // Error messages with a source reference.
        names: ['text', 'line', 'file'],
        patterns: [/^(.+)---line (\d+) of file (.*)$/],
        evaluate: function (reference, groups) {
          const line = parseInt(groups.line, 10);
          parsedLog.messages.push({
            severity: 'error',
            name,
            text: groups.text,
            log: reference,
            source: {
              file: _this.normalizePath(groups.file),
              range: {
                start: line,
                end: line
              }
            }
          });
        }
      }, {
        // Input file notifications. The non-greedy pattern at the beginning is to
        // work around a MiKTeX bug in which there is no newline after the first
        // line.
        names: ['input'],
        patterns: [/^.*?(?:Database file #\d+|The style file|The top-level auxiliary file|A level-\d+ auxiliary file): (.*)$/],
        evaluate: function (reference, groups) {
          parsedLog.inputs.push(groups.input);
        }
      }]);

      try {
        const { stdout } = yield _this.executeCommand({
          args: ['kpsewhich'].concat(parsedLog.inputs),
          cd: '$ROOTDIR',
          severity: 'warning',
          stdout: true
        });

        parsedLog.inputs = stdout ? stdout.split('\n').filter(function (file) {
          return file;
        }).map(function (file) {
          return _this.normalizePath(file);
        }) : [];
      } catch (error) {}

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParseBibTeXLog;
ParseBibTeXLog.parameterTypes = [new _set2.default(['BibTeXLog'])];
ParseBibTeXLog.commands = new _set2.default(['build', 'log']);
ParseBibTeXLog.defaultActions = ['parse'];
ParseBibTeXLog.description = 'Parses any bibtex produced logs.';