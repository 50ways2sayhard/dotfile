'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseSplitIndexStdOut extends _Rule2.default {

  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const output = yield _this.getResolvedOutput('$DIR_0/$NAME_0.log-ParsedSplitIndexStdErr');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };

      yield _this.firstParameter.parse([{
        // splitindex generates error messages via Perl's die command so we just
        // parse anything that has that form.
        names: ['text', 'file', 'line'],
        patterns: [/^(.*) at (.*?) line ([0-9]+)\.$/],
        evaluate: function (reference, groups) {
          const line = parseInt(groups.line, 10);

          // Do not include the log reference since it is to a virtual file.
          parsedLog.messages.push({
            severity: 'error',
            name: 'splitindex',
            text: groups.text,
            source: {
              file: groups.file,
              range: {
                start: line,
                end: line
              }
            }
          });
        }
      }]);

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParseSplitIndexStdOut;
ParseSplitIndexStdOut.parameterTypes = [new _set2.default(['SplitIndexStdErr'])];
ParseSplitIndexStdOut.defaultActions = ['parse'];
ParseSplitIndexStdOut.description = 'Parses the error output of splitindex.';