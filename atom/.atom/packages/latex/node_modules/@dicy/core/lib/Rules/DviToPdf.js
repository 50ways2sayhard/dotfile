'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _State = require('../State');

var _State2 = _interopRequireDefault(_State);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DviToPdf extends _Rule2.default {

  static isApplicable(state, command, phase, options, parameters = []) {
    return (0, _asyncToGenerator3.default)(function* () {
      // Only apply if output format is pdf and intermediate PostScript generation
      // is off.
      return options.outputFormat === 'pdf' && !options.intermediatePostScript;
    })();
  }

  initialize() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      // Zap the previous target since we are building a pdf
      yield _this.replaceResolvedTarget('$FILEPATH_0', '$DIR_0/$NAME_0.pdf');
    })();
  }

  constructCommand() {
    return {
      args: [this.options.dviToPdfEngine, '-o', '{{$DIR_0/$NAME_0.pdf}}', '{{$FILEPATH_0}}'],
      cd: '$ROOTDIR',
      severity: 'error',
      outputs: ['$DIR_0/$NAME_0.pdf']
    };
  }
}
exports.default = DviToPdf;
DviToPdf.parameterTypes = [new _set2.default(['DeviceIndependentFile'])];
DviToPdf.description = 'Converts DVI to PDF using (x)dvipdfm(x).';