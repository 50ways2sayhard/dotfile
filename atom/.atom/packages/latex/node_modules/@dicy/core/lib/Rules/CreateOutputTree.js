'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _State = require('../State');

var _State2 = _interopRequireDefault(_State);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CreateOutputTree extends _Rule2.default {

  static isApplicable(state, command, phase, options, parameters = []) {
    return (0, _asyncToGenerator3.default)(function* () {
      return !!options.outputDirectory && options.outputDirectory !== '.';
    })();
  }

  run() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const outputDirectories = _lodash2.default.uniq(_this.options.jobNames.map(function (jobName) {
        return _this.state.getJobOptions(jobName).outputDirectory || '.';
      }).filter(function (outputDirectory) {
        return outputDirectory !== '.';
      }));
      const directories = yield _this.globPath('**/*', {
        types: 'directories',
        ignorePattern: outputDirectories.map(function (outputDirectory) {
          return `${outputDirectory}/**`;
        })
      });

      yield _promise2.default.all(directories.map(function (directory) {
        return _File2.default.ensureDir(_path2.default.resolve(_this.rootPath, _this.options.outputDirectory || '.', directory));
      }));

      return true;
    })();
  }
}
exports.default = CreateOutputTree;
CreateOutputTree.phases = new _set2.default(['initialize']);
CreateOutputTree.alwaysEvaluate = true;
CreateOutputTree.description = 'Create directory tree for aux files when `outputDirectory` is set.';