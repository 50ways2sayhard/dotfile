'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _State = require('../State');

var _State2 = _interopRequireDefault(_State);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LhsToTeX extends _Rule2.default {

  static isApplicable(state, command, phase, options, parameters = []) {
    return (0, _asyncToGenerator3.default)(function* () {
      return parameters.some(function (file) {
        return file.type === 'LiterateHaskell' && options.literateHaskellEngine === 'lhs2TeX' || file.type === 'LiterateAgda' && options.literateAgdaEngine === 'lhs2TeX';
      });
    })();
  }

  constructCommand() {
    const args = ['lhs2TeX'];

    // If the source is a literate Agda file then add the `--agda` option
    if (this.firstParameter.type === 'LiterateAgda') {
      args.push('--agda');
    }

    // Add the style option. `poly` is default so omit it.
    switch (this.options.lhs2texStyle) {
      case 'math':
        args.push('--math');
        break;
      case 'newCode':
        args.push('--newcode');
        break;
      case 'code':
        args.push('--code');
        break;
      case 'typewriter':
        args.push('--tt');
        break;
      case 'verbatim':
        args.push('--verb');
        break;
    }

    // Add the output file and source files.
    args.push('-o', '{{$DIR_0/$NAME_0.tex}}', '{{$FILEPATH_0}}');

    return {
      args,
      cd: '$ROOTDIR',
      severity: 'error',
      outputs: ['$DIR_0/$NAME_0.tex']
    };
  }
}
exports.default = LhsToTeX;
LhsToTeX.parameterTypes = [new _set2.default(['LiterateHaskell', 'LiterateAgda'])];
LhsToTeX.description = 'Runs lhs2TeX on lhs or lagda files.';