'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function escapePath(filePath) {
  return filePath.replace(/\\/g, '\\\\');
}

class PatchSyncTeX extends _Rule2.default {

  constructCommand() {
    // Remove the concordance part of the file name because patchSynctex just
    // adds it back on. The first parameter is really supposed to be the Rnw
    // file, but patchSynctex has no way to know the output path of knit if
    // it is a custom value. If we pass the root name of the concordance file
    // then we can trick it into customizing the name.
    const filePath = escapePath(this.firstParameter.filePath.replace('-concordance', ''));
    // Remove the SyncTeX extensions because patchSynctex tries to guess it.
    const synctexPath = escapePath(this.secondParameter.filePath.replace(/\.synctex(\.gz)?$/i, ''));
    const lines = ['library(patchSynctex)', `patchSynctex('${filePath}',syncfile='${synctexPath}')`];

    // Set the severity to warning since patching the SyncTeX file is just a
    // nicety.
    return {
      args: ['Rscript', '-e', lines.join(';')],
      cd: '$ROOTDIR',
      severity: 'warning',
      outputs: ['$DIR_1/BASE_1']
    };
  }
}
exports.default = PatchSyncTeX;
PatchSyncTeX.parameterTypes = [new _set2.default(['KnitrConcordance']), new _set2.default(['SyncTeX'])];
PatchSyncTeX.phases = new _set2.default(['finalize']);
PatchSyncTeX.description = 'Patches SyncTeX files if LaTeX document was generated by knitr so PDF reverse sync will work.';