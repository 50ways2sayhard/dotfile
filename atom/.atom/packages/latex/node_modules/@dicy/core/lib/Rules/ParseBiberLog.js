'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseBiberLog extends _Rule2.default {

  parse() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const output = yield _this.getResolvedOutput('$FILEPATH_0-ParsedBiberLog');
      if (!output) return false;

      const parsedLog = {
        messages: [],
        inputs: [],
        outputs: [],
        calls: []
      };

      yield _this.firstParameter.parse([{
        // Input messages
        names: ['text', 'input'],
        patterns: [/^[^>]+> INFO - ((?:Found BibTeX data source|Reading) '([^']+)')$/],
        evaluate: function (reference, groups) {
          parsedLog.inputs.push(groups.input);

          const message = {
            severity: 'info',
            name: 'Biber',
            text: groups.text,
            log: reference
          };

          parsedLog.messages.push(message);
        }
      }, {
        // Output messages
        names: ['text', 'output'],
        patterns: [/^[^>]+> INFO - ((?:Writing|Logfile is) '([^']+)'.*)$/],
        evaluate: function (reference, groups) {
          parsedLog.outputs.push(groups.output);

          const message = {
            severity: 'info',
            name: 'Biber',
            text: groups.text,
            log: reference
          };

          parsedLog.messages.push(message);
        }
      }, {
        // All other messages
        names: ['severity', 'text'],
        patterns: [/^[^>]+> (INFO|WARN|ERROR) - (.*)$/],
        evaluate: function (reference, groups) {
          let severity = 'error';
          switch (groups.severity) {
            case 'INFO':
              severity = 'info';
              break;
            case 'WARN':
              severity = 'warning';
              break;
          }

          const message = {
            severity,
            name: 'Biber',
            text: groups.text,
            log: reference
          };

          parsedLog.messages.push(message);
        }
      }]);

      output.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ParseBiberLog;
ParseBiberLog.parameterTypes = [new _set2.default(['BiberLog'])];
ParseBiberLog.commands = new _set2.default(['build', 'log']);
ParseBiberLog.defaultActions = ['parse'];
ParseBiberLog.description = 'Parses any biber produced logs.';