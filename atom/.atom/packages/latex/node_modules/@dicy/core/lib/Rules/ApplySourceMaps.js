'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inRange(range, line) {
  return range.start <= line && range.end >= line;
}

class ApplySourceMaps extends _Rule2.default {

  initialize() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      // We are going to modify the log so add it as an output
      yield _this.getOutput(_this.secondParameter.filePath);
    })();
  }

  run() {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (!_this2.secondParameter.value || !_this2.firstParameter.value) return true;

      const sourceMaps = _this2.firstParameter.value;
      const parsedLog = _lodash2.default.cloneDeep(_this2.secondParameter.value);

      for (const sourceMap of sourceMaps.maps) {
        for (const message of parsedLog.messages) {
          if (!message.source || message.source.file !== sourceMap.output) continue;

          if (message.source && message.source.range) {
            const startMapping = sourceMap.mappings.find(function (mapping) {
              return message.source && message.source.range && inRange(mapping.output, message.source.range.start);
            });
            const endMapping = sourceMap.mappings.find(function (mapping) {
              return message.source && message.source.range && inRange(mapping.output, message.source.range.end);
            });
            if (startMapping && endMapping) {
              message.source = {
                file: sourceMap.input,
                range: {
                  start: startMapping.input.start,
                  end: endMapping.input.end
                }
              };
            }
          } else {
            message.source = { file: sourceMap.input };
          }
        }
      }

      _this2.secondParameter.value = parsedLog;

      return true;
    })();
  }
}
exports.default = ApplySourceMaps;
ApplySourceMaps.parameterTypes = [new _set2.default(['ParsedSourceMap']), new _set2.default(['ParsedAsymptoteLog', 'ParsedBiberLog', 'ParsedBibTeXLog', 'ParsedLaTeXLog', 'ParsedMakeIndexLog'])];
ApplySourceMaps.commands = new _set2.default(['build', 'log']);
ApplySourceMaps.description = 'Applies source maps to log files.';