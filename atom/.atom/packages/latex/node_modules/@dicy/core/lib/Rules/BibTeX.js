'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Log = require('../Log');

var _Log2 = _interopRequireDefault(_Log);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _State = require('../State');

var _State2 = _interopRequireDefault(_State);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const JAPANESE_BIBTEX_PATTERN = /^u?pbibtex$/;

class BibTeX extends _Rule2.default {

  static isApplicable(state, command, phase, options, parameters = []) {
    return (0, _asyncToGenerator3.default)(function* () {
      return state.isGrandparentOf(parameters[0], parameters[1]) && !!parameters[1].value && parameters[1].value.commands && !!parameters[1].value.commands.includes('bibdata');
    })();
  }

  initialize() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      yield _this.getResolvedInputs(['$OUTDIR/$JOB.log-ParsedLaTeXLog', '$DIR_0/$NAME_0.blg-ParsedBibTeXLog']);
    })();
  }

  getFileActions(file) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      switch (file.type) {
        case 'ParsedLaTeXLog':
          const { name } = _path2.default.parse(_this2.firstParameter.filePath);
          if (file.value && _Log2.default.hasRunMessage(file.value, 'BibTeX', name)) {
            return ['run'];
          }
          break;
        case 'ParsedBibTeXLog':
          return ['updateDependencies'];
        case 'LaTeXAuxilary':
          return ['run'];
      }

      return [];
    })();
  }

  constructCommand() {
    const engine = this.options.bibtexEngine;
    const args = [engine];

    if (JAPANESE_BIBTEX_PATTERN.test(engine)) {
      if (this.options.kanji) {
        args.push(`-kanji=${this.options.kanji}`);
      }
      if (this.options.kanjiInternal) {
        args.push(`-kanji-internal=${this.options.kanjiInternal}`);
      }
    }

    args.push('{{$BASE_0}}');

    return {
      args,
      cd: '$ROOTDIR/$DIR_0',
      severity: 'error',
      outputs: ['$DIR_0/$NAME_0.bbl', '$DIR_0/$NAME_0.blg']
    };
  }
}
exports.default = BibTeX;
BibTeX.parameterTypes = [new _set2.default(['LaTeXAuxilary']), new _set2.default(['ParsedLaTeXAuxilary'])];
BibTeX.description = 'Runs BibTeX to process bibliography files (bib) when need is detected.';