'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _File = require('../File');

var _File2 = _interopRequireDefault(_File);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _State = require('../State');

var _State2 = _interopRequireDefault(_State);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CheckForMissingBuildRule extends _Rule2.default {

  static isApplicable(state, command, phase, options, parameters = []) {
    return (0, _asyncToGenerator3.default)(function* () {
      // Only apply if parameter is main source file for job.
      return parameters.some(function (file) {
        return file.filePath === options.filePath;
      });
    })();
  }

  run() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const rules = (0, _from2.default)(_this.rules);

      // If targets found for this job then just return true.
      if (rules.some(function (rule) {
        return rule.command === 'build' && rule.phase === 'execute' && rule.parameters.includes(_this.firstParameter);
      })) return true;
      const jobName = _this.options.jobName;

      // No rules found so log an error message and cause rule failure.
      const jobText = jobName ? ` with job name of \`${jobName}\`` : '';
      _this.error(`No applicable build rule was found for main source file \`${_this.firstParameter.filePath}\`${jobText}.`);

      return false;
    })();
  }
}
exports.default = CheckForMissingBuildRule;
CheckForMissingBuildRule.parameterTypes = [new _set2.default(['*'])];
CheckForMissingBuildRule.phases = new _set2.default(['finalize']);
CheckForMissingBuildRule.alwaysEvaluate = true;
CheckForMissingBuildRule.description = 'Check for no applicable build rule.';